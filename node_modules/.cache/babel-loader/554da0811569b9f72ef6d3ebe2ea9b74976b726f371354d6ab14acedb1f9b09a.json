{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\Modal\\\\Modal.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport QAMode from '../QAMode/QAMode';\nimport SelectionMode from '../SelectionMode/SelectionMode';\nimport styles from './Modal.module.css';\nimport { useQuizContext } from '../../context/QuizContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst modeComponents = {\n  1: QAMode,\n  2: SelectionMode\n};\nfunction Modal({\n  block,\n  onClose,\n  selectedMode,\n  timerStarted,\n  timerEnded,\n  showAnswer,\n  setTimerStarted,\n  handleTimerEnd,\n  handleShowAnswer,\n  handleForceStop\n}) {\n  _s();\n  var _quizStates$currentQu;\n  const {\n    updateQuizState,\n    currentQuizId,\n    quizStates\n  } = useQuizContext();\n  const data = ((_quizStates$currentQu = quizStates[currentQuizId]) === null || _quizStates$currentQu === void 0 ? void 0 : _quizStates$currentQu.data) || [];\n  const handleSelectCategory = () => {\n    updateQuizState(currentQuizId, {\n      data: data.map(category => category.id === block.categoryId ? {\n        ...category,\n        blocks: category.blocks.map(b => b.id === block.id ? {\n          ...b,\n          used: true\n        } : b)\n      } : category)\n    });\n    onClose();\n  };\n  if (!block) return null;\n  const ModeComponent = modeComponents[selectedMode];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles.modal} ${styles.show}`,\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modalContent,\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.closeButton,\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), ModeComponent ? /*#__PURE__*/_jsxDEV(ModeComponent, {\n        block: block,\n        showAnswer: showAnswer,\n        setTimerStarted: setTimerStarted,\n        timerStarted: timerStarted,\n        timerEnded: timerEnded,\n        handleTimerEnd: handleTimerEnd,\n        handleShowAnswer: handleShowAnswer,\n        handleForceStop: handleForceStop,\n        handleSelectCategory: handleSelectCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Unknown mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(Modal, \"JKENamrMHXj5bbGcQAjoe84c8dk=\", false, function () {\n  return [useQuizContext];\n});\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","QAMode","SelectionMode","styles","useQuizContext","jsxDEV","_jsxDEV","modeComponents","Modal","block","onClose","selectedMode","timerStarted","timerEnded","showAnswer","setTimerStarted","handleTimerEnd","handleShowAnswer","handleForceStop","_s","_quizStates$currentQu","updateQuizState","currentQuizId","quizStates","data","handleSelectCategory","map","category","id","categoryId","blocks","b","used","ModeComponent","className","modal","show","onClick","children","modalContent","e","stopPropagation","closeButton","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/Modal/Modal.jsx"],"sourcesContent":["import React from 'react';\r\nimport QAMode from '../QAMode/QAMode';\r\nimport SelectionMode from '../SelectionMode/SelectionMode';\r\nimport styles from './Modal.module.css';\r\nimport { useQuizContext } from '../../context/QuizContext';\r\n\r\nconst modeComponents = {\r\n  1: QAMode,\r\n  2: SelectionMode,\r\n};\r\n\r\nfunction Modal({\r\n  block,\r\n  onClose,\r\n  selectedMode,\r\n  timerStarted,\r\n  timerEnded,\r\n  showAnswer,\r\n  setTimerStarted,\r\n  handleTimerEnd,\r\n  handleShowAnswer,\r\n  handleForceStop,\r\n}) {\r\n  const { updateQuizState, currentQuizId, quizStates } = useQuizContext();\r\n\r\n  const data = quizStates[currentQuizId]?.data || [];\r\n\r\n  const handleSelectCategory = () => {\r\n    updateQuizState(currentQuizId, {\r\n      data: data.map((category) =>\r\n        category.id === block.categoryId\r\n          ? {\r\n              ...category,\r\n              blocks: category.blocks.map((b) =>\r\n                b.id === block.id ? { ...b, used: true } : b\r\n              ),\r\n            }\r\n          : category\r\n      ),\r\n    });\r\n    onClose();\r\n  };\r\n\r\n  if (!block) return null;\r\n\r\n  const ModeComponent = modeComponents[selectedMode];\r\n\r\n  return (\r\n    <div className={`${styles.modal} ${styles.show}`} onClick={onClose}>\r\n      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>\r\n        <span className={styles.closeButton} onClick={onClose}>&times;</span>\r\n        {ModeComponent ? (\r\n          <ModeComponent\r\n            block={block}\r\n            showAnswer={showAnswer}\r\n            setTimerStarted={setTimerStarted}\r\n            timerStarted={timerStarted}\r\n            timerEnded={timerEnded}\r\n            handleTimerEnd={handleTimerEnd}\r\n            handleShowAnswer={handleShowAnswer}\r\n            handleForceStop={handleForceStop}\r\n            handleSelectCategory={handleSelectCategory}\r\n          />\r\n        ) : (\r\n          <div>Unknown mode</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}