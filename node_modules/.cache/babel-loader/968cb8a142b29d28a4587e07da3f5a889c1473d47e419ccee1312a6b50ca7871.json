{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\features\\\\Quiz\\\\QuizPage\\\\QuizPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState } from 'react';\nimport ContentContainer from '../../../layout/ContentContainer/ContentContainer';\nimport EndMessage from '../../Game/Messages/EndMessage/EndMessage';\nimport MenuModal from '../../../common/MenuModal/MenuModal';\nimport Modal from '../../../common/Modal/Modal';\nimport Settings from '../../../features/Game/Settings/Settings';\nimport ConfettiAnimation from '../../Game/Animation/ConfettiAnimation';\nimport styles from './QuizPage.module.css';\nimport { useQuizContext } from '../../../../context/QuizContext';\nimport PCImage from '../../../../assets/images/PC_horizontal_1line_black.svg';\nimport { getTotalBlocks, getUsedBlocksCount, handleBlockSelect, handleCloseModal, handleNewGame, handleSelectCategory } from './quizPageUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    quizStates,\n    setShowQuizPage,\n    currentQuizId,\n    selectedMode,\n    data,\n    markBlockAsUsed,\n    setQuizStates\n  } = useQuizContext();\n  const currentQuizState = useMemo(() => quizStates[currentQuizId || ''] || {}, [quizStates, currentQuizId]);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [confettiRunning, setConfettiRunning] = useState(false);\n  const [showEndMessage, setShowEndMessage] = useState(false);\n  const [isMenuVisible, setIsMenuVisible] = useState(false);\n  const [isBlockUsed, setIsBlockUsed] = useState(false);\n  const totalBlocks = useMemo(() => getTotalBlocks(data), [data]);\n  const usedBlocksCount = useMemo(() => getUsedBlocksCount(currentQuizState), [currentQuizState]);\n  const handleMainMenu = () => {\n    setShowQuizPage(false);\n  };\n  const handleModalClose = () => {\n    handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(ConfettiAnimation, {\n      isRunning: confettiRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: PCImage,\n        alt: \"PC horizontal line\",\n        className: styles.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n        data: data,\n        onBlockSelect: (block, category) => handleBlockSelect(block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed),\n        usedBlocks: currentQuizState.usedBlocks || {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), selectedBlock && /*#__PURE__*/_jsxDEV(Modal, {\n        block: selectedBlock,\n        categoryName: (selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.name) || 'Без категории',\n        onClose: handleModalClose,\n        selectedMode: selectedMode || 1,\n        onSelectCategory: (categoryId, blockId) => handleSelectCategory(categoryId, blockId, currentQuizId || '', markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleModalClose),\n        isBlockUsed: isBlockUsed,\n        onTryAgain: () => setIsBlockUsed(false),\n        onContinue: handleModalClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), showEndMessage && currentQuizId && /*#__PURE__*/_jsxDEV(EndMessage, {\n      currentQuizId: currentQuizId,\n      setQuizStates: setQuizStates,\n      onNewGame: () => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage),\n      onMainMenu: handleMainMenu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => setIsSettingsVisible(true),\n      showMainMenu: handleMainMenu,\n      onNewGame: () => handleNewGame(currentQuizId || '', setQuizStates, setConfettiRunning, setShowEndMessage),\n      isVisible: isMenuVisible,\n      closeMenuModal: () => setIsMenuVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => setIsSettingsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"bnwhenrPgTwoDcru1uoNLVyr8n0=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useMemo","useState","ContentContainer","EndMessage","MenuModal","Modal","Settings","ConfettiAnimation","styles","useQuizContext","PCImage","getTotalBlocks","getUsedBlocksCount","handleBlockSelect","handleCloseModal","handleNewGame","handleSelectCategory","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","_s","quizStates","setShowQuizPage","currentQuizId","selectedMode","data","markBlockAsUsed","setQuizStates","currentQuizState","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","selectedCategory","setSelectedCategory","confettiRunning","setConfettiRunning","showEndMessage","setShowEndMessage","isMenuVisible","setIsMenuVisible","isBlockUsed","setIsBlockUsed","totalBlocks","usedBlocksCount","handleMainMenu","handleModalClose","className","quiz_page","children","isRunning","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","image","onBlockSelect","block","category","usedBlocks","categoryName","name","onClose","onSelectCategory","categoryId","blockId","onTryAgain","onContinue","onNewGame","onMainMenu","showSettings","showMainMenu","isVisible","closeMenuModal","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/features/Quiz/QuizPage/QuizPage.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport ContentContainer from '../../../layout/ContentContainer/ContentContainer';\r\nimport EndMessage from '../../Game/Messages/EndMessage/EndMessage';\r\nimport MenuModal from '../../../common/MenuModal/MenuModal';\r\nimport Modal from '../../../common/Modal/Modal';\r\nimport Settings from '../../../features/Game/Settings/Settings';\r\nimport ConfettiAnimation from '../../Game/Animation/ConfettiAnimation';\r\nimport styles from './QuizPage.module.css';\r\nimport { useQuizContext } from '../../../../context/QuizContext';\r\nimport { QuizBlock, Category } from '../../../../types/quiz.types';\r\nimport PCImage from '../../../../assets/images/PC_horizontal_1line_black.svg';\r\nimport {\r\n  getTotalBlocks,\r\n  getUsedBlocksCount,\r\n  handleBlockSelect,\r\n  handleCloseModal,\r\n  handleNewGame,\r\n  handleSelectCategory\r\n} from './quizPageUtils';\r\n\r\ninterface SelectedCategory extends Category {\r\n  name: string;\r\n}\r\n\r\nconst QuizPage: React.FC = () => {\r\n  const { \r\n    quizStates, \r\n    setShowQuizPage, \r\n    currentQuizId, \r\n    selectedMode, \r\n    data, \r\n    markBlockAsUsed, \r\n    setQuizStates \r\n  } = useQuizContext();\r\n\r\n  const currentQuizState = useMemo(() => \r\n    quizStates[currentQuizId || ''] || {}, \r\n    [quizStates, currentQuizId]\r\n  );\r\n\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState<boolean>(false);\r\n  const [selectedBlock, setSelectedBlock] = useState<QuizBlock | null>(null);\r\n  const [selectedCategory, setSelectedCategory] = useState<SelectedCategory | null>(null);\r\n  const [confettiRunning, setConfettiRunning] = useState<boolean>(false);\r\n  const [showEndMessage, setShowEndMessage] = useState<boolean>(false);\r\n  const [isMenuVisible, setIsMenuVisible] = useState<boolean>(false);\r\n  const [isBlockUsed, setIsBlockUsed] = useState<boolean>(false);\r\n\r\n  const totalBlocks = useMemo(() => getTotalBlocks(data), [data]);\r\n  const usedBlocksCount = useMemo(() => \r\n    getUsedBlocksCount(currentQuizState), \r\n    [currentQuizState]\r\n  );\r\n\r\n  const handleMainMenu = (): void => {\r\n    setShowQuizPage(false);\r\n  };\r\n\r\n  const handleModalClose = (): void => {\r\n    handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <ConfettiAnimation isRunning={confettiRunning} />\r\n      {data ? (\r\n        <>\r\n          <img src={PCImage} alt=\"PC horizontal line\" className={styles.image} />\r\n          <ContentContainer\r\n            data={data}\r\n            onBlockSelect={(block: QuizBlock, category: Category) =>\r\n              handleBlockSelect(\r\n                block,\r\n                category,\r\n                currentQuizState,\r\n                setSelectedBlock,\r\n                setSelectedCategory,\r\n                setIsBlockUsed\r\n              )\r\n            }\r\n            usedBlocks={currentQuizState.usedBlocks || {}}\r\n          />\r\n\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              categoryName={selectedCategory?.name || 'Без категории'}\r\n              onClose={handleModalClose}\r\n              selectedMode={selectedMode || 1}\r\n              onSelectCategory={(categoryId: string, blockId: number) =>\r\n                handleSelectCategory(\r\n                  categoryId,\r\n                  blockId,\r\n                  currentQuizId || '',\r\n                  markBlockAsUsed,\r\n                  totalBlocks,\r\n                  usedBlocksCount,\r\n                  setConfettiRunning,\r\n                  setShowEndMessage,\r\n                  handleModalClose\r\n                )\r\n              }\r\n              isBlockUsed={isBlockUsed}\r\n              onTryAgain={() => setIsBlockUsed(false)}\r\n              onContinue={handleModalClose}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n\r\n      {showEndMessage && currentQuizId && (\r\n        <EndMessage\r\n          currentQuizId={currentQuizId}\r\n          setQuizStates={setQuizStates}\r\n          onNewGame={() => handleNewGame(\r\n            currentQuizId, \r\n            setQuizStates, \r\n            setConfettiRunning, \r\n            setShowEndMessage\r\n          )}\r\n          onMainMenu={handleMainMenu}\r\n        />\r\n      )}\r\n\r\n      <MenuModal\r\n        showSettings={() => setIsSettingsVisible(true)}\r\n        showMainMenu={handleMainMenu}\r\n        onNewGame={() => handleNewGame(\r\n          currentQuizId || '', \r\n          setQuizStates, \r\n          setConfettiRunning, \r\n          setShowEndMessage\r\n        )}\r\n        isVisible={isMenuVisible}\r\n        closeMenuModal={() => setIsMenuVisible(false)}\r\n      />\r\n\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}