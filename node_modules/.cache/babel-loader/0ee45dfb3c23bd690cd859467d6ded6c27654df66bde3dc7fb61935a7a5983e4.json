{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\features\\\\Quiz\\\\QuizCard\\\\QuizCard.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuizContext } from '../../../../context/QuizContext';\nimport styles from './QuizCard.module.css';\nimport quizImage from '../../images/quizpng.png';\nimport { ReactComponent as PCImage } from '../../../../assets/images/PC_horizontal_1line_color.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizCard({\n  startQuiz,\n  mode,\n  name,\n  categories,\n  uuid\n}) {\n  _s();\n  const {\n    quizStates\n  } = useQuizContext();\n\n  // Получаем текущее состояние викторины для конкретного uuid\n  const currentQuizState = quizStates[uuid] || {};\n  const completedGames = currentQuizState.completedGames || 0;\n\n  // Подсчет общего количества вопросов\n  const totalQuestions = categories && Array.isArray(categories) ? categories.reduce((acc, category) => {\n    var _category$blocks;\n    return acc + (((_category$blocks = category.blocks) === null || _category$blocks === void 0 ? void 0 : _category$blocks.length) || 0);\n  }, 0) : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.card,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.image,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questionCount,\n        children: [totalQuestions, \" \\u0437\\u0430\\u043F\\u0438\\u0442\\u0430\\u043D\\u044C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.bottomRow,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.startButton,\n          onClick: startQuiz,\n          children: \"\\u041F\\u0440\\u043E\\u0432\\u0435\\u0441\\u0442\\u0438 \\u043D\\u0430\\u0436\\u0438\\u0432\\u043E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizCard, \"EqTrApgvlr4e/ryTZF8bkEEWDQw=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizCard;\nQuizCard.propTypes = {\n  startQuiz: PropTypes.func.isRequired,\n  mode: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  categories: PropTypes.array.isRequired,\n  // Проп для всех категорий\n  uuid: PropTypes.string.isRequired // uuid для уникальной идентификации викторины\n};\nexport default QuizCard;\nvar _c;\n$RefreshReg$(_c, \"QuizCard\");","map":{"version":3,"names":["React","PropTypes","useQuizContext","styles","quizImage","ReactComponent","PCImage","jsxDEV","_jsxDEV","QuizCard","startQuiz","mode","name","categories","uuid","_s","quizStates","currentQuizState","completedGames","totalQuestions","Array","isArray","reduce","acc","category","_category$blocks","blocks","length","className","card","children","image","questionCount","fileName","_jsxFileName","lineNumber","columnNumber","bottomRow","startButton","onClick","_c","propTypes","func","isRequired","number","string","array","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/features/Quiz/QuizCard/QuizCard.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useQuizContext } from '../../../../context/QuizContext';\r\nimport styles from './QuizCard.module.css';\r\nimport quizImage from '../../images/quizpng.png';\r\nimport { ReactComponent as PCImage } from '../../../../assets/images/PC_horizontal_1line_color.svg';\r\n\r\nfunction QuizCard({ startQuiz, mode, name, categories, uuid }) {\r\n  const { quizStates } = useQuizContext();\r\n\r\n  // Получаем текущее состояние викторины для конкретного uuid\r\n  const currentQuizState = quizStates[uuid] || {};\r\n  const completedGames = currentQuizState.completedGames || 0;\r\n\r\n  // Подсчет общего количества вопросов\r\n  const totalQuestions = categories && Array.isArray(categories)\r\n    ? categories.reduce((acc, category) => acc + (category.blocks?.length || 0), 0)\r\n    : 0;\r\n\r\n  return (\r\n    <div className={styles.card}>\r\n      <div className={styles.image}>\r\n        {/* <img src={quizImage} alt=\"Quiz Image\" className={styles.imageContent} /> */}\r\n        <div className={styles.questionCount}>{totalQuestions} запитань</div>\r\n      {/* </div>\r\n      <div className={styles.details}> */}\r\n        <h2>{name}</h2>\r\n        <div className={styles.bottomRow}>\r\n          {/* <PCImage className={styles.affiliationIcon} /> */}\r\n          {/* <p className={styles.games}>Ігри: {completedGames}</p> */}\r\n          <button className={styles.startButton} onClick={startQuiz}>\r\n            Провести наживо\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nQuizCard.propTypes = {\r\n  startQuiz: PropTypes.func.isRequired,\r\n  mode: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  categories: PropTypes.array.isRequired, // Проп для всех категорий\r\n  uuid: PropTypes.string.isRequired, // uuid для уникальной идентификации викторины\r\n};\r\n\r\nexport default QuizCard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,cAAc,QAAQ,iCAAiC;AAChE,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,SAAS,MAAM,0BAA0B;AAChD,SAASC,cAAc,IAAIC,OAAO,QAAQ,yDAAyD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpG,SAASC,QAAQA,CAAC;EAAEC,SAAS;EAAEC,IAAI;EAAEC,IAAI;EAAEC,UAAU;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC7D,MAAM;IAAEC;EAAW,CAAC,GAAGd,cAAc,CAAC,CAAC;;EAEvC;EACA,MAAMe,gBAAgB,GAAGD,UAAU,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/C,MAAMI,cAAc,GAAGD,gBAAgB,CAACC,cAAc,IAAI,CAAC;;EAE3D;EACA,MAAMC,cAAc,GAAGN,UAAU,IAAIO,KAAK,CAACC,OAAO,CAACR,UAAU,CAAC,GAC1DA,UAAU,CAACS,MAAM,CAAC,CAACC,GAAG,EAAEC,QAAQ;IAAA,IAAAC,gBAAA;IAAA,OAAKF,GAAG,IAAI,EAAAE,gBAAA,GAAAD,QAAQ,CAACE,MAAM,cAAAD,gBAAA,uBAAfA,gBAAA,CAAiBE,MAAM,KAAI,CAAC,CAAC;EAAA,GAAE,CAAC,CAAC,GAC7E,CAAC;EAEL,oBACEnB,OAAA;IAAKoB,SAAS,EAAEzB,MAAM,CAAC0B,IAAK;IAAAC,QAAA,eAC1BtB,OAAA;MAAKoB,SAAS,EAAEzB,MAAM,CAAC4B,KAAM;MAAAD,QAAA,gBAE3BtB,OAAA;QAAKoB,SAAS,EAAEzB,MAAM,CAAC6B,aAAc;QAAAF,QAAA,GAAEX,cAAc,EAAC,mDAAS;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAGrE5B,OAAA;QAAAsB,QAAA,EAAKlB;MAAI;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACf5B,OAAA;QAAKoB,SAAS,EAAEzB,MAAM,CAACkC,SAAU;QAAAP,QAAA,eAG/BtB,OAAA;UAAQoB,SAAS,EAAEzB,MAAM,CAACmC,WAAY;UAACC,OAAO,EAAE7B,SAAU;UAAAoB,QAAA,EAAC;QAE3D;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACrB,EAAA,CA9BQN,QAAQ;EAAA,QACQP,cAAc;AAAA;AAAAsC,EAAA,GAD9B/B,QAAQ;AAgCjBA,QAAQ,CAACgC,SAAS,GAAG;EACnB/B,SAAS,EAAET,SAAS,CAACyC,IAAI,CAACC,UAAU;EACpChC,IAAI,EAAEV,SAAS,CAAC2C,MAAM,CAACD,UAAU;EACjC/B,IAAI,EAAEX,SAAS,CAAC4C,MAAM,CAACF,UAAU;EACjC9B,UAAU,EAAEZ,SAAS,CAAC6C,KAAK,CAACH,UAAU;EAAE;EACxC7B,IAAI,EAAEb,SAAS,CAAC4C,MAAM,CAACF,UAAU,CAAE;AACrC,CAAC;AAED,eAAelC,QAAQ;AAAC,IAAA+B,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}