{"ast":null,"code":"// Подсчет общего количества блоков\nexport const getTotalBlocks=data=>{const totalBlocks=(data===null||data===void 0?void 0:data.reduce((acc,category)=>{var _category$blocks;return acc+(((_category$blocks=category.blocks)===null||_category$blocks===void 0?void 0:_category$blocks.length)||0);},0))||0;console.log('Total blocks:',totalBlocks);return totalBlocks;};// Подсчет количества использованных блоков\nexport const getUsedBlocksCount=currentQuizState=>{const usedBlocksCount=Object.values(currentQuizState.usedBlocks||{}).reduce((acc,categoryBlocks)=>acc+categoryBlocks.length,0);console.log('Used blocks count:',usedBlocksCount);return usedBlocksCount;};// Обработка выбора блока\nexport const handleBlockSelect=(block,category,currentQuizState,setSelectedBlock,setSelectedCategory,setIsBlockUsed)=>{var _currentQuizState$use,_currentQuizState$use2;setSelectedBlock(block);setSelectedCategory(category);if((_currentQuizState$use=currentQuizState.usedBlocks)!==null&&_currentQuizState$use!==void 0&&(_currentQuizState$use2=_currentQuizState$use[category.id])!==null&&_currentQuizState$use2!==void 0&&_currentQuizState$use2.includes(block.id)){setIsBlockUsed(true);}else{setIsBlockUsed(false);}};// Обработка закрытия модального окна\nexport const handleCloseModal=(setSelectedBlock,setSelectedCategory,setIsBlockUsed)=>{setSelectedBlock(null);setSelectedCategory(null);setIsBlockUsed(false);};// Обработка завершения игры\nexport const handleNewGame=(currentQuizId,setQuizStates,setConfettiRunning,setShowEndMessage)=>{console.log('Starting new game for quiz:',currentQuizId);setQuizStates(prevStates=>{const currentGameState=prevStates[currentQuizId]||{};const completedGames=(currentGameState.completedGames||0)+1;// Сохраняем количество завершенных игр в localStorage\nconst updatedState={...prevStates,[currentQuizId]:{...currentGameState,usedBlocks:{},// Обнуляем использованные блоки\ncompletedGames// Обновляем количество завершенных игр\n}};localStorage.setItem('quizStates',JSON.stringify(updatedState));return updatedState;});setConfettiRunning(false);setShowEndMessage(false);};// Обработка возврата в главное меню\nexport const handleMainMenu=function(currentQuizId,setQuizStates,setShowQuizPage,setConfettiRunning){let clearState=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;console.log('Returning to main menu, clearing state:',clearState);if(clearState){setQuizStates(prevStates=>{const currentGameState=prevStates[currentQuizId]||{};// Очищаем только использованные блоки, оставляем завершенные игры\nconst updatedState={...prevStates,[currentQuizId]:{...currentGameState,usedBlocks:{},// Очищаем только использованные блоки\ncompletedGames:currentGameState.completedGames// Сохраняем завершенные игры\n}};// Обновляем данные в localStorage\nlocalStorage.setItem('quizStates',JSON.stringify(updatedState));return updatedState;});}setShowQuizPage(false);setConfettiRunning(false);};// Обработка выбора категории и запуска конфетти\nexport const handleSelectCategory=(categoryId,blockId,currentQuizId,markBlockAsUsed,totalBlocks,usedBlocksCount,setConfettiRunning,setShowEndMessage,handleCloseModal)=>{markBlockAsUsed(currentQuizId,categoryId,blockId);if(usedBlocksCount+1===totalBlocks){setConfettiRunning(true);setShowEndMessage(true);}handleCloseModal();};","map":{"version":3,"names":["getTotalBlocks","data","totalBlocks","reduce","acc","category","_category$blocks","blocks","length","console","log","getUsedBlocksCount","currentQuizState","usedBlocksCount","Object","values","usedBlocks","categoryBlocks","handleBlockSelect","block","setSelectedBlock","setSelectedCategory","setIsBlockUsed","_currentQuizState$use","_currentQuizState$use2","id","includes","handleCloseModal","handleNewGame","currentQuizId","setQuizStates","setConfettiRunning","setShowEndMessage","prevStates","currentGameState","completedGames","updatedState","localStorage","setItem","JSON","stringify","handleMainMenu","setShowQuizPage","clearState","arguments","undefined","handleSelectCategory","categoryId","blockId","markBlockAsUsed"],"sources":["E:/quiz-app-react/src/components/QuizPage/quizPageUtils.js"],"sourcesContent":["// Подсчет общего количества блоков\r\nexport const getTotalBlocks = (data) => {\r\n  const totalBlocks = data?.reduce((acc, category) => acc + (category.blocks?.length || 0), 0) || 0;\r\n  console.log('Total blocks:', totalBlocks);\r\n  return totalBlocks;\r\n};\r\n\r\n// Подсчет количества использованных блоков\r\nexport const getUsedBlocksCount = (currentQuizState) => {\r\n  const usedBlocksCount = Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n    (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n    0\r\n  );\r\n  console.log('Used blocks count:', usedBlocksCount);\r\n  return usedBlocksCount;\r\n};\r\n\r\n// Обработка выбора блока\r\nexport const handleBlockSelect = (\r\n  block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed\r\n) => {\r\n  setSelectedBlock(block);\r\n  setSelectedCategory(category);\r\n\r\n  if (currentQuizState.usedBlocks?.[category.id]?.includes(block.id)) {\r\n    setIsBlockUsed(true);\r\n  } else {\r\n    setIsBlockUsed(false);\r\n  }\r\n};\r\n\r\n// Обработка закрытия модального окна\r\nexport const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\r\n  setSelectedBlock(null);\r\n  setSelectedCategory(null);\r\n  setIsBlockUsed(false);\r\n};\r\n\r\n// Обработка завершения игры\r\nexport const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\r\n  console.log('Starting new game for quiz:', currentQuizId);\r\n\r\n  setQuizStates((prevStates) => {\r\n    const currentGameState = prevStates[currentQuizId] || {};\r\n    const completedGames = (currentGameState.completedGames || 0) + 1;\r\n\r\n    // Сохраняем количество завершенных игр в localStorage\r\n    const updatedState = {\r\n      ...prevStates,\r\n      [currentQuizId]: {\r\n        ...currentGameState,\r\n        usedBlocks: {}, // Обнуляем использованные блоки\r\n        completedGames, // Обновляем количество завершенных игр\r\n      },\r\n    };\r\n    localStorage.setItem('quizStates', JSON.stringify(updatedState));\r\n    return updatedState;\r\n  });\r\n\r\n  setConfettiRunning(false);\r\n  setShowEndMessage(false);\r\n};\r\n\r\n// Обработка возврата в главное меню\r\nexport const handleMainMenu = (\r\n  currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false\r\n) => {\r\n  console.log('Returning to main menu, clearing state:', clearState);\r\n\r\n  if (clearState) {\r\n    setQuizStates((prevStates) => {\r\n      const currentGameState = prevStates[currentQuizId] || {};\r\n\r\n      // Очищаем только использованные блоки, оставляем завершенные игры\r\n      const updatedState = {\r\n        ...prevStates,\r\n        [currentQuizId]: {\r\n          ...currentGameState,\r\n          usedBlocks: {}, // Очищаем только использованные блоки\r\n          completedGames: currentGameState.completedGames, // Сохраняем завершенные игры\r\n        },\r\n      };\r\n\r\n      // Обновляем данные в localStorage\r\n      localStorage.setItem('quizStates', JSON.stringify(updatedState));\r\n      return updatedState;\r\n    });\r\n  }\r\n\r\n  setShowQuizPage(false);\r\n  setConfettiRunning(false);\r\n};\r\n\r\n// Обработка выбора категории и запуска конфетти\r\nexport const handleSelectCategory = (\r\n  categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal\r\n) => {\r\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n  if (usedBlocksCount + 1 === totalBlocks) {\r\n    setConfettiRunning(true);\r\n    setShowEndMessage(true);\r\n  }\r\n\r\n  handleCloseModal();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}