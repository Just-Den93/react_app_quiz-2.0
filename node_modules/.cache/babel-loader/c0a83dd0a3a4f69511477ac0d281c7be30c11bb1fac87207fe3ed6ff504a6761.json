{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\context\\\\QuizContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizContext = /*#__PURE__*/createContext();\nexport function useQuizContext() {\n  _s();\n  return useContext(QuizContext);\n}\n_s(useQuizContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function QuizProvider({\n  children\n}) {\n  _s2();\n  const [showQuizPage, setShowQuizPage] = useState(() => {\n    const savedState = localStorage.getItem('showQuizPage');\n    return savedState === 'true';\n  });\n  const [selectedMode, setSelectedMode] = useState(() => {\n    const mode = localStorage.getItem('selectedMode');\n    return mode || null;\n  });\n  const [currentQuizId, setCurrentQuizId] = useState(() => {\n    return localStorage.getItem('currentQuizId');\n  });\n  const [quizStates, setQuizStates] = useState(() => {\n    const savedStates = localStorage.getItem('quizStates');\n    return savedStates ? JSON.parse(savedStates) : {};\n  });\n  const [data, setData] = useState(() => {\n    const savedData = localStorage.getItem('data');\n    return savedData ? JSON.parse(savedData) : null;\n  });\n  const [completedGames, setCompletedGames] = useState(() => {\n    const savedGames = localStorage.getItem('completedGames');\n    return savedGames ? JSON.parse(savedGames) : 0;\n  });\n  useEffect(() => {\n    if (selectedMode && currentQuizId) {\n      const selectedData = loadJsonDataByMode(selectedMode);\n      const savedData = localStorage.getItem('data');\n      if (selectedData && selectedData.categories && JSON.stringify(selectedData.categories) !== savedData) {\n        setData(selectedData.categories);\n        updateQuizState(currentQuizId, {\n          data: selectedData.categories\n        });\n        localStorage.setItem('data', JSON.stringify(selectedData.categories));\n      }\n    }\n  }, [selectedMode, currentQuizId]);\n  useEffect(() => {\n    if (selectedMode !== null) {\n      localStorage.setItem('selectedMode', selectedMode);\n    }\n  }, [selectedMode]);\n  useEffect(() => {\n    localStorage.setItem('showQuizPage', showQuizPage.toString());\n  }, [showQuizPage]);\n  useEffect(() => {\n    if (currentQuizId !== null) {\n      localStorage.setItem('currentQuizId', currentQuizId);\n    }\n  }, [currentQuizId]);\n  useEffect(() => {\n    localStorage.setItem('completedGames', completedGames.toString());\n  }, [completedGames]);\n  const updateQuizState = (uuid, newState) => {\n    setQuizStates(prevStates => {\n      const updatedStates = {\n        ...prevStates,\n        [uuid]: {\n          ...prevStates[uuid],\n          ...newState\n        }\n      };\n      localStorage.setItem('quizStates', JSON.stringify(updatedStates));\n      return updatedStates;\n    });\n  };\n  const markBlockAsUsed = (quizId, categoryId, blockId) => {\n    if (!categoryId) {\n      console.error('categoryId не определен, невозможно отметить блок как используемый');\n      return;\n    }\n    console.log('markBlockAsUsed called for quizId:', quizId);\n    setQuizStates(prevStates => {\n      const previousState = prevStates[quizId] || {};\n      const updatedUsedBlocks = {\n        ...previousState.usedBlocks\n      };\n      if (!updatedUsedBlocks[categoryId]) {\n        updatedUsedBlocks[categoryId] = [];\n      }\n      if (!updatedUsedBlocks[categoryId].includes(blockId)) {\n        updatedUsedBlocks[categoryId].push(blockId);\n      }\n\n      // Логируем прогресс использования блоков\n      console.log('Updated used blocks:', updatedUsedBlocks);\n      const allBlocksUsed = data.every(category => updatedUsedBlocks[category.id] && updatedUsedBlocks[category.id].length === category.blocks.length);\n\n      // Логируем результат проверки на завершение викторины\n      if (allBlocksUsed) {\n        console.log('All blocks used. Incrementing completed games.');\n        setCompletedGames(prevGames => prevGames + 1);\n      }\n      const updatedStates = {\n        ...prevStates,\n        [quizId]: {\n          ...previousState,\n          usedBlocks: updatedUsedBlocks\n        }\n      };\n      localStorage.setItem('quizStates', JSON.stringify(updatedStates));\n      localStorage.setItem(`usedBlocks-${quizId}`, JSON.stringify(updatedUsedBlocks));\n      return updatedStates;\n    });\n  };\n\n  // Новая функция для сброса состояния и возврата в главное меню\n  const handleMainMenu = () => {\n    setShowQuizPage(false);\n    setCurrentQuizId(null); // Сбрасываем текущую викторину\n  };\n  return /*#__PURE__*/_jsxDEV(QuizContext.Provider, {\n    value: {\n      showQuizPage,\n      setShowQuizPage,\n      selectedMode,\n      setSelectedMode,\n      currentQuizId,\n      setCurrentQuizId,\n      quizStates,\n      setQuizStates,\n      updateQuizState,\n      markBlockAsUsed,\n      data,\n      completedGames,\n      handleMainMenu // Экспортируем функцию для возврата в главное меню\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s2(QuizProvider, \"VlVnvizqtZrDl/tB+xwojKMsJcU=\");\n_c = QuizProvider;\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","loadJsonDataByMode","jsxDEV","_jsxDEV","QuizContext","useQuizContext","_s","QuizProvider","children","_s2","showQuizPage","setShowQuizPage","savedState","localStorage","getItem","selectedMode","setSelectedMode","mode","currentQuizId","setCurrentQuizId","quizStates","setQuizStates","savedStates","JSON","parse","data","setData","savedData","completedGames","setCompletedGames","savedGames","selectedData","categories","stringify","updateQuizState","setItem","toString","uuid","newState","prevStates","updatedStates","markBlockAsUsed","quizId","categoryId","blockId","console","error","log","previousState","updatedUsedBlocks","usedBlocks","includes","push","allBlocksUsed","every","category","id","length","blocks","prevGames","handleMainMenu","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/context/QuizContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\r\n\r\nconst QuizContext = createContext();\r\n\r\nexport function useQuizContext() {\r\n  return useContext(QuizContext);\r\n}\r\n\r\nexport function QuizProvider({ children }) {\r\n  const [showQuizPage, setShowQuizPage] = useState(() => {\r\n    const savedState = localStorage.getItem('showQuizPage');\r\n    return savedState === 'true';\r\n  });\r\n\r\n  const [selectedMode, setSelectedMode] = useState(() => {\r\n    const mode = localStorage.getItem('selectedMode');\r\n    return mode || null;\r\n  });\r\n\r\n  const [currentQuizId, setCurrentQuizId] = useState(() => {\r\n    return localStorage.getItem('currentQuizId');\r\n  });\r\n\r\n  const [quizStates, setQuizStates] = useState(() => {\r\n    const savedStates = localStorage.getItem('quizStates');\r\n    return savedStates ? JSON.parse(savedStates) : {};\r\n  });\r\n\r\n  const [data, setData] = useState(() => {\r\n    const savedData = localStorage.getItem('data');\r\n    return savedData ? JSON.parse(savedData) : null;\r\n  });\r\n\r\n  const [completedGames, setCompletedGames] = useState(() => {\r\n    const savedGames = localStorage.getItem('completedGames');\r\n    return savedGames ? JSON.parse(savedGames) : 0;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedMode && currentQuizId) {\r\n      const selectedData = loadJsonDataByMode(selectedMode);\r\n      const savedData = localStorage.getItem('data');\r\n\r\n      if (selectedData && selectedData.categories && JSON.stringify(selectedData.categories) !== savedData) {\r\n        setData(selectedData.categories);\r\n        updateQuizState(currentQuizId, { data: selectedData.categories });\r\n        localStorage.setItem('data', JSON.stringify(selectedData.categories));\r\n      }\r\n    }\r\n  }, [selectedMode, currentQuizId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedMode !== null) {\r\n      localStorage.setItem('selectedMode', selectedMode);\r\n    }\r\n  }, [selectedMode]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('showQuizPage', showQuizPage.toString());\r\n  }, [showQuizPage]);\r\n\r\n  useEffect(() => {\r\n    if (currentQuizId !== null) {\r\n      localStorage.setItem('currentQuizId', currentQuizId);\r\n    }\r\n  }, [currentQuizId]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('completedGames', completedGames.toString());\r\n  }, [completedGames]);\r\n\r\n  const updateQuizState = (uuid, newState) => {\r\n    setQuizStates((prevStates) => {\r\n      const updatedStates = {\r\n        ...prevStates,\r\n        [uuid]: {\r\n          ...prevStates[uuid],\r\n          ...newState,\r\n        },\r\n      };\r\n      localStorage.setItem('quizStates', JSON.stringify(updatedStates));\r\n      return updatedStates;\r\n    });\r\n  };\r\n\r\n  const markBlockAsUsed = (quizId, categoryId, blockId) => {\r\n    if (!categoryId) {\r\n      console.error('categoryId не определен, невозможно отметить блок как используемый');\r\n      return;\r\n    }\r\n  \r\n    console.log('markBlockAsUsed called for quizId:', quizId);\r\n  \r\n    setQuizStates((prevStates) => {\r\n      const previousState = prevStates[quizId] || {};\r\n      const updatedUsedBlocks = { ...previousState.usedBlocks };\r\n  \r\n      if (!updatedUsedBlocks[categoryId]) {\r\n        updatedUsedBlocks[categoryId] = [];\r\n      }\r\n  \r\n      if (!updatedUsedBlocks[categoryId].includes(blockId)) {\r\n        updatedUsedBlocks[categoryId].push(blockId);\r\n      }\r\n  \r\n      // Логируем прогресс использования блоков\r\n      console.log('Updated used blocks:', updatedUsedBlocks);\r\n  \r\n      const allBlocksUsed = data.every(category =>\r\n        updatedUsedBlocks[category.id] &&\r\n        updatedUsedBlocks[category.id].length === category.blocks.length\r\n      );\r\n  \r\n      // Логируем результат проверки на завершение викторины\r\n      if (allBlocksUsed) {\r\n        console.log('All blocks used. Incrementing completed games.');\r\n        setCompletedGames((prevGames) => prevGames + 1);\r\n      }\r\n  \r\n      const updatedStates = {\r\n        ...prevStates,\r\n        [quizId]: {\r\n          ...previousState,\r\n          usedBlocks: updatedUsedBlocks,\r\n        },\r\n      };\r\n  \r\n      localStorage.setItem('quizStates', JSON.stringify(updatedStates));\r\n      localStorage.setItem(`usedBlocks-${quizId}`, JSON.stringify(updatedUsedBlocks));\r\n  \r\n      return updatedStates;\r\n    });\r\n  };\r\n  \r\n\r\n  // Новая функция для сброса состояния и возврата в главное меню\r\n  const handleMainMenu = () => {\r\n    setShowQuizPage(false);\r\n    setCurrentQuizId(null); // Сбрасываем текущую викторину\r\n  };\r\n\r\n  return (\r\n    <QuizContext.Provider value={{\r\n      showQuizPage,\r\n      setShowQuizPage,\r\n      selectedMode,\r\n      setSelectedMode,\r\n      currentQuizId,\r\n      setCurrentQuizId,\r\n      quizStates,\r\n      setQuizStates,\r\n      updateQuizState,\r\n      markBlockAsUsed,\r\n      data,\r\n      completedGames,\r\n      handleMainMenu // Экспортируем функцию для возврата в главное меню\r\n    }}>\r\n      {children}\r\n    </QuizContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}