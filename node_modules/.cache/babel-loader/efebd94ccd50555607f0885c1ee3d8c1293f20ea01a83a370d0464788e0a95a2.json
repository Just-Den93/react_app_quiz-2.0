{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\QuizPage\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from 'react';\nimport ContentContainer from '../ContentContainer/ContentContainer';\nimport EndMessage from '../EndMessage/EndMessage';\nimport MenuModal from '../MenuModal/MenuModal';\nimport Modal from '../Modal/Modal';\nimport Settings from '../Settings/Settings';\nimport ConfettiAnimation from '../ConfettiAnimation/ConfettiAnimation';\nimport styles from './QuizPage.module.css';\nimport { useQuizContext } from '../../context/QuizContext';\nimport PCImage from '../../images/PC_horizontal_1line_black.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    quizStates,\n    setShowQuizPage,\n    currentQuizId,\n    selectedMode,\n    data,\n    markBlockAsUsed,\n    setQuizStates\n  } = useQuizContext();\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [confettiRunning, setConfettiRunning] = useState(false);\n  const [showEndMessage, setShowEndMessage] = useState(false);\n\n  // Общий метод для сброса данных\n  const resetQuizData = () => {\n    localStorage.removeItem(`data-${currentQuizId}`);\n    setQuizStates(prevStates => ({\n      ...prevStates,\n      [currentQuizId]: {\n        ...prevStates[currentQuizId],\n        usedBlocks: {},\n        // Сброс блоков\n        data: null // Сброс данных викторины\n      }\n    }));\n  };\n  const totalBlocks = useMemo(() => {\n    return (data === null || data === void 0 ? void 0 : data.reduce((acc, category) => acc + category.blocks.length, 0)) || 0;\n  }, [data]);\n  const usedBlocksCount = useMemo(() => {\n    return Object.values(currentQuizState.usedBlocks || {}).reduce((acc, categoryBlocks) => acc + categoryBlocks.length, 0);\n  }, [currentQuizState]);\n  const handleBlockSelect = (block, category) => {\n    setSelectedBlock(block);\n    setSelectedCategory(category);\n  };\n  const handleCloseModal = () => {\n    setSelectedBlock(null);\n    setSelectedCategory(null);\n  };\n  const handleSelectCategory = (categoryId, blockId) => {\n    markBlockAsUsed(currentQuizId, categoryId, blockId);\n    if (usedBlocksCount === totalBlocks - 1) {\n      setConfettiRunning(true);\n      setShowEndMessage(true);\n    }\n    handleCloseModal();\n  };\n  const handleNewGame = () => {\n    resetQuizData(); // Вызов сброса данных\n    setConfettiRunning(false);\n    setShowEndMessage(false);\n  };\n  const handleMainMenu = (clearState = false) => {\n    if (clearState) {\n      resetQuizData(); // Вызов сброса данных\n    }\n    setShowQuizPage(false);\n    setConfettiRunning(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(ConfettiAnimation, {\n      isRunning: confettiRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: PCImage,\n        alt: \"PC horizontal line\",\n        className: styles.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n        data: data,\n        onBlockSelect: handleBlockSelect,\n        usedBlocks: currentQuizState.usedBlocks || {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), selectedBlock && /*#__PURE__*/_jsxDEV(Modal, {\n        block: selectedBlock,\n        categoryName: (selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.name) || 'Без категории',\n        onClose: handleCloseModal,\n        selectedMode: selectedMode,\n        onSelectCategory: handleSelectCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), showEndMessage && /*#__PURE__*/_jsxDEV(EndMessage, {\n      onNewGame: handleNewGame,\n      onMainMenu: () => handleMainMenu(true) // Очистка данных только если вызвано из EndMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => setIsSettingsVisible(true),\n      showMainMenu: () => handleMainMenu(false) // Без очистки, если вызвано из MenuModal\n      ,\n      onNewGame: handleNewGame // Передаем метод для MenuModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => setIsSettingsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"hi/OuMP0GudjkA1fAiErnZbsAK8=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","ContentContainer","EndMessage","MenuModal","Modal","Settings","ConfettiAnimation","styles","useQuizContext","PCImage","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","_s","quizStates","setShowQuizPage","currentQuizId","selectedMode","data","markBlockAsUsed","setQuizStates","currentQuizState","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","selectedCategory","setSelectedCategory","confettiRunning","setConfettiRunning","showEndMessage","setShowEndMessage","resetQuizData","localStorage","removeItem","prevStates","usedBlocks","totalBlocks","reduce","acc","category","blocks","length","usedBlocksCount","Object","values","categoryBlocks","handleBlockSelect","block","handleCloseModal","handleSelectCategory","categoryId","blockId","handleNewGame","handleMainMenu","clearState","className","quiz_page","children","isRunning","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","image","onBlockSelect","categoryName","name","onClose","onSelectCategory","onNewGame","onMainMenu","showSettings","showMainMenu","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/QuizPage/QuizPage.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\nimport EndMessage from '../EndMessage/EndMessage';\r\nimport MenuModal from '../MenuModal/MenuModal';\r\nimport Modal from '../Modal/Modal';\r\nimport Settings from '../Settings/Settings';\r\nimport ConfettiAnimation from '../ConfettiAnimation/ConfettiAnimation';\r\nimport styles from './QuizPage.module.css';\r\nimport { useQuizContext } from '../../context/QuizContext';\r\nimport PCImage from '../../images/PC_horizontal_1line_black.svg';\r\n\r\nfunction QuizPage() {\r\n  const { quizStates, setShowQuizPage, currentQuizId, selectedMode, data, markBlockAsUsed, setQuizStates } = useQuizContext();\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [confettiRunning, setConfettiRunning] = useState(false);\r\n  const [showEndMessage, setShowEndMessage] = useState(false);\r\n\r\n  // Общий метод для сброса данных\r\n  const resetQuizData = () => {\r\n    localStorage.removeItem(`data-${currentQuizId}`);\r\n    setQuizStates((prevStates) => ({\r\n      ...prevStates,\r\n      [currentQuizId]: {\r\n        ...prevStates[currentQuizId],\r\n        usedBlocks: {},  // Сброс блоков\r\n        data: null,      // Сброс данных викторины\r\n      },\r\n    }));\r\n  };\r\n\r\n  const totalBlocks = useMemo(() => {\r\n    return data?.reduce((acc, category) => acc + category.blocks.length, 0) || 0;\r\n  }, [data]);\r\n\r\n  const usedBlocksCount = useMemo(() => {\r\n    return Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n      (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n      0\r\n    );\r\n  }, [currentQuizState]);\r\n\r\n  const handleBlockSelect = (block, category) => {\r\n    setSelectedBlock(block);\r\n    setSelectedCategory(category);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setSelectedBlock(null);\r\n    setSelectedCategory(null);\r\n  };\r\n\r\n  const handleSelectCategory = (categoryId, blockId) => {\r\n    markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n    if (usedBlocksCount === totalBlocks - 1) {\r\n      setConfettiRunning(true);\r\n      setShowEndMessage(true);\r\n    }\r\n\r\n    handleCloseModal();\r\n  };\r\n\r\n  const handleNewGame = () => {\r\n    resetQuizData();  // Вызов сброса данных\r\n    setConfettiRunning(false);\r\n    setShowEndMessage(false);\r\n  };\r\n\r\n  const handleMainMenu = (clearState = false) => {\r\n    if (clearState) {\r\n      resetQuizData();  // Вызов сброса данных\r\n    }\r\n    setShowQuizPage(false);\r\n    setConfettiRunning(false);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <ConfettiAnimation isRunning={confettiRunning} />\r\n      {data ? (\r\n        <>\r\n          <img src={PCImage} alt=\"PC horizontal line\" className={styles.image} />\r\n          <ContentContainer\r\n            data={data}\r\n            onBlockSelect={handleBlockSelect}\r\n            usedBlocks={currentQuizState.usedBlocks || {}}\r\n          />\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              categoryName={selectedCategory?.name || 'Без категории'}\r\n              onClose={handleCloseModal}\r\n              selectedMode={selectedMode}\r\n              onSelectCategory={handleSelectCategory}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n      {showEndMessage && (\r\n        <EndMessage\r\n          onNewGame={handleNewGame}\r\n          onMainMenu={() => handleMainMenu(true)}  // Очистка данных только если вызвано из EndMessage\r\n        />\r\n      )}\r\n      <MenuModal\r\n        showSettings={() => setIsSettingsVisible(true)}\r\n        showMainMenu={() => handleMainMenu(false)} // Без очистки, если вызвано из MenuModal\r\n        onNewGame={handleNewGame}  // Передаем метод для MenuModal\r\n      />\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}