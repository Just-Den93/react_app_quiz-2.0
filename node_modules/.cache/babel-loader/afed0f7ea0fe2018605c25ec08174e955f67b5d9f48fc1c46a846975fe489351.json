{"ast":null,"code":"import React,{useMemo,useState}from'react';import ContentContainer from'../ContentContainer/ContentContainer';import EndMessage from'../EndMessage/EndMessage';import MenuModal from'../MenuModal/MenuModal';import Modal from'../Modal/Modal';import Settings from'../Settings/Settings';import ConfettiAnimation from'../Animation/ConfettiAnimation';import styles from'./QuizPage.module.css';import{useQuizContext}from'../../context/QuizContext';import PCImage from'../../images/PC_horizontal_1line_black.svg';import{getTotalBlocks,getUsedBlocksCount,handleBlockSelect,handleCloseModal,handleNewGame,handleMainMenu as quizPageHandleMainMenu,handleSelectCategory}from'./quizPageUtils';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function QuizPage(){const{quizStates,setShowQuizPage,currentQuizId,selectedMode,data,markBlockAsUsed,setQuizStates}=useQuizContext();// Логируем состояние викторины\nconsole.log('QuizPage: currentQuizId',currentQuizId);console.log('QuizPage: quizStates',quizStates);const currentQuizState=useMemo(()=>quizStates[currentQuizId]||{},[quizStates,currentQuizId]);const[isSettingsVisible,setIsSettingsVisible]=useState(false);const[selectedBlock,setSelectedBlock]=useState(null);const[selectedCategory,setSelectedCategory]=useState(null);const[confettiRunning,setConfettiRunning]=useState(false);const[showEndMessage,setShowEndMessage]=useState(false);const[isMenuVisible,setIsMenuVisible]=useState(false);const[isBlockUsed,setIsBlockUsed]=useState(false);const totalBlocks=useMemo(()=>getTotalBlocks(data),[data]);const usedBlocksCount=useMemo(()=>getUsedBlocksCount(currentQuizState),[currentQuizState]);// Логируем общее количество блоков и использованные блоки\nconsole.log('Total blocks:',totalBlocks);console.log('Used blocks count:',usedBlocksCount);const handleMainMenu=()=>{console.log('QuizPage: handleMainMenu called');setShowQuizPage(false);};return/*#__PURE__*/_jsxs(\"div\",{className:styles.quiz_page,children:[/*#__PURE__*/_jsx(ConfettiAnimation,{isRunning:confettiRunning}),data?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:PCImage,alt:\"PC horizontal line\",className:styles.image}),/*#__PURE__*/_jsx(ContentContainer,{data:data,onBlockSelect:(block,category)=>handleBlockSelect(block,category,currentQuizState,setSelectedBlock,setSelectedCategory,setIsBlockUsed),usedBlocks:currentQuizState.usedBlocks||{}}),selectedBlock&&/*#__PURE__*/_jsx(Modal,{block:selectedBlock,categoryName:(selectedCategory===null||selectedCategory===void 0?void 0:selectedCategory.name)||'Без категории',onClose:()=>handleCloseModal(setSelectedBlock,setSelectedCategory,setIsBlockUsed),selectedMode:selectedMode,onSelectCategory:(categoryId,blockId)=>handleSelectCategory(categoryId,blockId,currentQuizId,markBlockAsUsed,totalBlocks,usedBlocksCount,setConfettiRunning,setShowEndMessage,()=>handleCloseModal(setSelectedBlock,setSelectedCategory,setIsBlockUsed)),isBlockUsed:isBlockUsed,onTryAgain:()=>setIsBlockUsed(false),onContinue:()=>handleCloseModal(setSelectedBlock,setSelectedCategory,setIsBlockUsed)})]}):/*#__PURE__*/_jsx(\"div\",{children:\"No data available.\"}),showEndMessage&&/*#__PURE__*/_jsx(EndMessage,{currentQuizId:currentQuizId,setQuizStates:setQuizStates,onNewGame:()=>handleNewGame(currentQuizId,setQuizStates,setConfettiRunning,setShowEndMessage),onMainMenu:handleMainMenu}),/*#__PURE__*/_jsx(MenuModal,{showSettings:()=>setIsSettingsVisible(true),showMainMenu:handleMainMenu,onNewGame:()=>handleNewGame(currentQuizId,setQuizStates,setConfettiRunning,setShowEndMessage),isVisible:isMenuVisible,closeMenuModal:()=>setIsMenuVisible(false)}),isSettingsVisible&&/*#__PURE__*/_jsx(Settings,{onClose:()=>setIsSettingsVisible(false)})]});}export default QuizPage;","map":{"version":3,"names":["React","useMemo","useState","ContentContainer","EndMessage","MenuModal","Modal","Settings","ConfettiAnimation","styles","useQuizContext","PCImage","getTotalBlocks","getUsedBlocksCount","handleBlockSelect","handleCloseModal","handleNewGame","handleMainMenu","quizPageHandleMainMenu","handleSelectCategory","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","QuizPage","quizStates","setShowQuizPage","currentQuizId","selectedMode","data","markBlockAsUsed","setQuizStates","console","log","currentQuizState","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","selectedCategory","setSelectedCategory","confettiRunning","setConfettiRunning","showEndMessage","setShowEndMessage","isMenuVisible","setIsMenuVisible","isBlockUsed","setIsBlockUsed","totalBlocks","usedBlocksCount","className","quiz_page","children","isRunning","src","alt","image","onBlockSelect","block","category","usedBlocks","categoryName","name","onClose","onSelectCategory","categoryId","blockId","onTryAgain","onContinue","onNewGame","onMainMenu","showSettings","showMainMenu","isVisible","closeMenuModal"],"sources":["E:/quiz-app-react/src/components/QuizPage/QuizPage.jsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\nimport EndMessage from '../EndMessage/EndMessage';\r\nimport MenuModal from '../MenuModal/MenuModal';\r\nimport Modal from '../Modal/Modal';\r\nimport Settings from '../Settings/Settings';\r\nimport ConfettiAnimation from '../Animation/ConfettiAnimation';\r\nimport styles from './QuizPage.module.css';\r\nimport { useQuizContext } from '../../context/QuizContext';\r\nimport PCImage from '../../images/PC_horizontal_1line_black.svg';\r\nimport {\r\n  getTotalBlocks,\r\n  getUsedBlocksCount,\r\n  handleBlockSelect,\r\n  handleCloseModal,\r\n  handleNewGame,\r\n  handleMainMenu as quizPageHandleMainMenu,\r\n  handleSelectCategory\r\n} from './quizPageUtils';\r\n\r\nfunction QuizPage() {\r\n  const { quizStates, setShowQuizPage, currentQuizId, selectedMode, data, markBlockAsUsed, setQuizStates } = useQuizContext();\r\n\r\n  // Логируем состояние викторины\r\n  console.log('QuizPage: currentQuizId', currentQuizId);\r\n  console.log('QuizPage: quizStates', quizStates);\r\n\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [confettiRunning, setConfettiRunning] = useState(false);\r\n  const [showEndMessage, setShowEndMessage] = useState(false);\r\n  const [isMenuVisible, setIsMenuVisible] = useState(false);\r\n  const [isBlockUsed, setIsBlockUsed] = useState(false);\r\n\r\n  const totalBlocks = useMemo(() => getTotalBlocks(data), [data]);\r\n  const usedBlocksCount = useMemo(() => getUsedBlocksCount(currentQuizState), [currentQuizState]);\r\n\r\n  // Логируем общее количество блоков и использованные блоки\r\n  console.log('Total blocks:', totalBlocks);\r\n  console.log('Used blocks count:', usedBlocksCount);\r\n\r\n  const handleMainMenu = () => {\r\n    console.log('QuizPage: handleMainMenu called');\r\n    setShowQuizPage(false);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <ConfettiAnimation isRunning={confettiRunning} />\r\n      {data ? (\r\n        <>\r\n          <img src={PCImage} alt=\"PC horizontal line\" className={styles.image} />\r\n          <ContentContainer\r\n            data={data}\r\n            onBlockSelect={(block, category) =>\r\n              handleBlockSelect(\r\n                block,\r\n                category,\r\n                currentQuizState,\r\n                setSelectedBlock,\r\n                setSelectedCategory,\r\n                setIsBlockUsed\r\n              )\r\n            }\r\n            usedBlocks={currentQuizState.usedBlocks || {}}\r\n          />\r\n\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              categoryName={selectedCategory?.name || 'Без категории'}\r\n              onClose={() => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)}\r\n              selectedMode={selectedMode}\r\n              onSelectCategory={(categoryId, blockId) =>\r\n                handleSelectCategory(\r\n                  categoryId,\r\n                  blockId,\r\n                  currentQuizId,\r\n                  markBlockAsUsed,\r\n                  totalBlocks,\r\n                  usedBlocksCount,\r\n                  setConfettiRunning,\r\n                  setShowEndMessage,\r\n                  () => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)\r\n                )\r\n              }\r\n              isBlockUsed={isBlockUsed}\r\n              onTryAgain={() => setIsBlockUsed(false)}\r\n              onContinue={() => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n\r\n      {showEndMessage && (\r\n        <EndMessage\r\n          currentQuizId={currentQuizId}\r\n          setQuizStates={setQuizStates}\r\n          onNewGame={() => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage)}\r\n          onMainMenu={handleMainMenu}\r\n        />\r\n      )}\r\n\r\n      <MenuModal\r\n        showSettings={() => setIsSettingsVisible(true)}\r\n        showMainMenu={handleMainMenu}\r\n        onNewGame={() => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage)}\r\n        isVisible={isMenuVisible}\r\n        closeMenuModal={() => setIsMenuVisible(false)}\r\n      />\r\n\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}