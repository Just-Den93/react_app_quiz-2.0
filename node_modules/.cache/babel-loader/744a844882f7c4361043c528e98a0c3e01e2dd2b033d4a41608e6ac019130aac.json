{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\app-quiz-react-project\\\\quiz-app\\\\src\\\\components\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport Header from './Header';\nimport ContentContainer from './ContentContainer';\nimport EndMessage from './EndMessage';\nimport MenuModal from './MenuModal';\nimport Settings from './Settings';\nimport Modal from './Modal';\nimport styles from '../styles/QuizPage.module.css';\nimport { useQuizContext } from '../context/QuizContext';\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    quizStates,\n    updateQuizState,\n    setShowQuizPage,\n    selectedMode,\n    currentQuizId,\n    markBlockAsUsed\n  } = useQuizContext();\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\n  const [data, setData] = useState(currentQuizState.data || null);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  useEffect(() => {\n    console.log('Current Quiz ID:', currentQuizId);\n    console.log('Current Quiz State:', currentQuizState);\n    if (!data && currentQuizId && selectedMode) {\n      console.log('Loading data for mode:', selectedMode);\n      const selectedData = loadJsonDataByMode(selectedMode);\n      if (selectedData) {\n        console.log('Data loaded:', selectedData);\n        setData(selectedData.categories);\n        updateQuizState(currentQuizId, {\n          data: selectedData.categories\n        });\n      } else {\n        console.log('No data found for mode:', selectedMode);\n      }\n    }\n  }, [data, currentQuizId, selectedMode, currentQuizState, updateQuizState]);\n  const handleSelectCategory = (categoryId, blockId) => {\n    markBlockAsUsed(currentQuizId, categoryId, blockId);\n    setSelectedBlock(null); // Закрываем модальное окно\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ContentContainer, {\n        data: data,\n        setSelectedBlock: setSelectedBlock\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), selectedBlock && /*#__PURE__*/_jsxDEV(Modal, {\n        block: selectedBlock,\n        onClose: () => setSelectedBlock(null),\n        onSelectCategory: handleSelectCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => setIsSettingsVisible(true),\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => setIsSettingsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"07nRk8bO8sJKjIWFU+AEqwwZm0A=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Header","ContentContainer","EndMessage","MenuModal","Settings","Modal","styles","useQuizContext","loadJsonDataByMode","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","_s","quizStates","updateQuizState","setShowQuizPage","selectedMode","currentQuizId","markBlockAsUsed","currentQuizState","data","setData","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","console","log","selectedData","categories","handleSelectCategory","categoryId","blockId","className","quiz_page","children","fileName","_jsxFileName","lineNumber","columnNumber","block","onClose","onSelectCategory","showSettings","showMainMenu","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/app-quiz-react-project/quiz-app/src/components/QuizPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport Header from './Header';\r\nimport ContentContainer from './ContentContainer';\r\nimport EndMessage from './EndMessage';\r\nimport MenuModal from './MenuModal';\r\nimport Settings from './Settings';\r\nimport Modal from './Modal';\r\nimport styles from '../styles/QuizPage.module.css';\r\nimport { useQuizContext } from '../context/QuizContext';\r\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\r\n\r\nfunction QuizPage() {\r\n  const { quizStates, updateQuizState, setShowQuizPage, selectedMode, currentQuizId, markBlockAsUsed } = useQuizContext();\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [data, setData] = useState(currentQuizState.data || null);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log('Current Quiz ID:', currentQuizId);\r\n    console.log('Current Quiz State:', currentQuizState);\r\n\r\n    if (!data && currentQuizId && selectedMode) {\r\n      console.log('Loading data for mode:', selectedMode);\r\n      const selectedData = loadJsonDataByMode(selectedMode);\r\n      if (selectedData) {\r\n        console.log('Data loaded:', selectedData);\r\n        setData(selectedData.categories);\r\n        updateQuizState(currentQuizId, { data: selectedData.categories });\r\n      } else {\r\n        console.log('No data found for mode:', selectedMode);\r\n      }\r\n    }\r\n  }, [data, currentQuizId, selectedMode, currentQuizState, updateQuizState]);\r\n\r\n  const handleSelectCategory = (categoryId, blockId) => {\r\n    markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n    setSelectedBlock(null);  // Закрываем модальное окно\r\n  };\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <Header />\r\n      {data ? (\r\n        <>\r\n          <ContentContainer data={data} setSelectedBlock={setSelectedBlock} />\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              onClose={() => setSelectedBlock(null)}\r\n              onSelectCategory={handleSelectCategory}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n      <EndMessage />\r\n      <MenuModal showSettings={() => setIsSettingsVisible(true)} showMainMenu={() => setShowQuizPage(false)} />\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}