{"ast":null,"code":"// Подсчет общего количества блоков\nexport const getTotalBlocks = data => {\n  const totalBlocks = (data === null || data === void 0 ? void 0 : data.reduce((acc, category) => {\n    var _category$blocks;\n    return acc + (((_category$blocks = category.blocks) === null || _category$blocks === void 0 ? void 0 : _category$blocks.length) || 0);\n  }, 0)) || 0;\n  console.log('Total blocks:', totalBlocks);\n  return totalBlocks;\n};\n\n// Подсчет количества использованных блоков\nexport const getUsedBlocksCount = currentQuizState => {\n  const usedBlocksCount = Object.values(currentQuizState.usedBlocks || {}).reduce((acc, categoryBlocks) => acc + categoryBlocks.length, 0);\n  console.log('Used blocks count:', usedBlocksCount);\n  return usedBlocksCount;\n};\n\n// Обработка выбора блока\nexport const handleBlockSelect = (block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\n  var _currentQuizState$use, _currentQuizState$use2;\n  setSelectedBlock(block);\n  setSelectedCategory(category);\n  if ((_currentQuizState$use = currentQuizState.usedBlocks) !== null && _currentQuizState$use !== void 0 && (_currentQuizState$use2 = _currentQuizState$use[category.id]) !== null && _currentQuizState$use2 !== void 0 && _currentQuizState$use2.includes(block.id)) {\n    setIsBlockUsed(true);\n  } else {\n    setIsBlockUsed(false);\n  }\n};\n\n// Обработка закрытия модального окна\nexport const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\n  setSelectedBlock(null);\n  setSelectedCategory(null);\n  setIsBlockUsed(false);\n};\n\n// Обработка завершения игры\nexport const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\n  console.log('Starting new game for quiz:', currentQuizId);\n  setQuizStates(prevStates => {\n    const currentGameState = prevStates[currentQuizId] || {};\n    const completedGames = (currentGameState.completedGames || 0) + 1;\n\n    // Сохраняем количество завершенных игр в localStorage\n    const updatedState = {\n      ...prevStates,\n      [currentQuizId]: {\n        ...currentGameState,\n        usedBlocks: {},\n        // Обнуляем использованные блоки\n        completedGames // Обновляем количество завершенных игр\n      }\n    };\n    localStorage.setItem('quizStates', JSON.stringify(updatedState));\n    return updatedState;\n  });\n  setConfettiRunning(false);\n  setShowEndMessage(false);\n};\n\n// Обработка возврата в главное меню\nexport const handleMainMenu = (currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false) => {\n  console.log('Returning to main menu, clearing state:', clearState);\n  if (clearState) {\n    setQuizStates(prevStates => {\n      const currentGameState = prevStates[currentQuizId] || {};\n\n      // Очищаем только использованные блоки, оставляем завершенные игры\n      const updatedState = {\n        ...prevStates,\n        [currentQuizId]: {\n          ...currentGameState,\n          usedBlocks: {},\n          // Очищаем только использованные блоки\n          completedGames: currentGameState.completedGames // Сохраняем завершенные игры\n        }\n      };\n\n      // Обновляем данные в localStorage\n      localStorage.setItem('quizStates', JSON.stringify(updatedState));\n      return updatedState;\n    });\n  }\n  setShowQuizPage(false);\n  setConfettiRunning(false);\n};\n\n// Обработка выбора категории и запуска конфетти\nexport const handleSelectCategory = (categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal) => {\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\n  if (usedBlocksCount + 1 === totalBlocks) {\n    setConfettiRunning(true);\n    setShowEndMessage(true);\n  }\n  handleCloseModal();\n};","map":{"version":3,"names":["getTotalBlocks","data","totalBlocks","reduce","acc","category","_category$blocks","blocks","length","console","log","getUsedBlocksCount","currentQuizState","usedBlocksCount","Object","values","usedBlocks","categoryBlocks","handleBlockSelect","block","setSelectedBlock","setSelectedCategory","setIsBlockUsed","_currentQuizState$use","_currentQuizState$use2","id","includes","handleCloseModal","handleNewGame","currentQuizId","setQuizStates","setConfettiRunning","setShowEndMessage","prevStates","currentGameState","completedGames","updatedState","localStorage","setItem","JSON","stringify","handleMainMenu","setShowQuizPage","clearState","handleSelectCategory","categoryId","blockId","markBlockAsUsed"],"sources":["E:/quiz-app-react/src/components/features/Quiz/QuizPage/quizPageUtils.js"],"sourcesContent":["// Подсчет общего количества блоков\r\nexport const getTotalBlocks = (data) => {\r\n  const totalBlocks = data?.reduce((acc, category) => acc + (category.blocks?.length || 0), 0) || 0;\r\n  console.log('Total blocks:', totalBlocks);\r\n  return totalBlocks;\r\n};\r\n\r\n// Подсчет количества использованных блоков\r\nexport const getUsedBlocksCount = (currentQuizState) => {\r\n  const usedBlocksCount = Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n    (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n    0\r\n  );\r\n  console.log('Used blocks count:', usedBlocksCount);\r\n  return usedBlocksCount;\r\n};\r\n\r\n// Обработка выбора блока\r\nexport const handleBlockSelect = (\r\n  block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed\r\n) => {\r\n  setSelectedBlock(block);\r\n  setSelectedCategory(category);\r\n\r\n  if (currentQuizState.usedBlocks?.[category.id]?.includes(block.id)) {\r\n    setIsBlockUsed(true);\r\n  } else {\r\n    setIsBlockUsed(false);\r\n  }\r\n};\r\n\r\n// Обработка закрытия модального окна\r\nexport const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\r\n  setSelectedBlock(null);\r\n  setSelectedCategory(null);\r\n  setIsBlockUsed(false);\r\n};\r\n\r\n// Обработка завершения игры\r\nexport const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\r\n  console.log('Starting new game for quiz:', currentQuizId);\r\n\r\n  setQuizStates((prevStates) => {\r\n    const currentGameState = prevStates[currentQuizId] || {};\r\n    const completedGames = (currentGameState.completedGames || 0) + 1;\r\n\r\n    // Сохраняем количество завершенных игр в localStorage\r\n    const updatedState = {\r\n      ...prevStates,\r\n      [currentQuizId]: {\r\n        ...currentGameState,\r\n        usedBlocks: {}, // Обнуляем использованные блоки\r\n        completedGames, // Обновляем количество завершенных игр\r\n      },\r\n    };\r\n    localStorage.setItem('quizStates', JSON.stringify(updatedState));\r\n    return updatedState;\r\n  });\r\n\r\n  setConfettiRunning(false);\r\n  setShowEndMessage(false);\r\n};\r\n\r\n// Обработка возврата в главное меню\r\nexport const handleMainMenu = (\r\n  currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false\r\n) => {\r\n  console.log('Returning to main menu, clearing state:', clearState);\r\n\r\n  if (clearState) {\r\n    setQuizStates((prevStates) => {\r\n      const currentGameState = prevStates[currentQuizId] || {};\r\n\r\n      // Очищаем только использованные блоки, оставляем завершенные игры\r\n      const updatedState = {\r\n        ...prevStates,\r\n        [currentQuizId]: {\r\n          ...currentGameState,\r\n          usedBlocks: {}, // Очищаем только использованные блоки\r\n          completedGames: currentGameState.completedGames, // Сохраняем завершенные игры\r\n        },\r\n      };\r\n\r\n      // Обновляем данные в localStorage\r\n      localStorage.setItem('quizStates', JSON.stringify(updatedState));\r\n      return updatedState;\r\n    });\r\n  }\r\n\r\n  setShowQuizPage(false);\r\n  setConfettiRunning(false);\r\n};\r\n\r\n// Обработка выбора категории и запуска конфетти\r\nexport const handleSelectCategory = (\r\n  categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal\r\n) => {\r\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n  if (usedBlocksCount + 1 === totalBlocks) {\r\n    setConfettiRunning(true);\r\n    setShowEndMessage(true);\r\n  }\r\n\r\n  handleCloseModal();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}