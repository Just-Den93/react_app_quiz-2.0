{"ast":null,"code":"import React,{useMemo,useState}from'react';import ContentContainer from'../ContentContainer/ContentContainer';import EndMessage from'../EndMessage/EndMessage';import MenuModal from'../MenuModal/MenuModal';import Modal from'../Modal/Modal';import Settings from'../Settings/Settings';import ConfettiAnimation from'../ConfettiAnimation/ConfettiAnimation';import styles from'./QuizPage.module.css';import{useQuizContext}from'../../context/QuizContext';import PCImage from'../../images/PC_horizontal_1line_black.svg';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function QuizPage(){const{quizStates,setShowQuizPage,currentQuizId,selectedMode,data,markBlockAsUsed,setQuizStates}=useQuizContext();const currentQuizState=useMemo(()=>quizStates[currentQuizId]||{},[quizStates,currentQuizId]);const[isSettingsVisible,setIsSettingsVisible]=useState(false);const[selectedBlock,setSelectedBlock]=useState(null);const[selectedCategory,setSelectedCategory]=useState(null);const[confettiRunning,setConfettiRunning]=useState(false);const[showEndMessage,setShowEndMessage]=useState(false);const[isMenuVisible,setIsMenuVisible]=useState(false);const[isBlockUsed,setIsBlockUsed]=useState(false);// Для отслеживания использования блока\nconst totalBlocks=useMemo(()=>{return(data===null||data===void 0?void 0:data.reduce((acc,category)=>acc+category.blocks.length,0))||0;},[data]);const usedBlocksCount=useMemo(()=>{return Object.values(currentQuizState.usedBlocks||{}).reduce((acc,categoryBlocks)=>acc+categoryBlocks.length,0);},[currentQuizState]);// Проверка использования блока до открытия Modal\nconst handleBlockSelect=(block,category)=>{var _currentQuizState$use,_currentQuizState$use2;setSelectedBlock(block);setSelectedCategory(category);if((_currentQuizState$use=currentQuizState.usedBlocks)!==null&&_currentQuizState$use!==void 0&&(_currentQuizState$use2=_currentQuizState$use[category.id])!==null&&_currentQuizState$use2!==void 0&&_currentQuizState$use2.includes(block.id)){setIsBlockUsed(true);// Блок уже использован\n}else{setIsBlockUsed(false);// Блок не использован\n}};const handleCloseModal=()=>{setSelectedBlock(null);setSelectedCategory(null);setIsBlockUsed(false);// Сброс состояния при закрытии Modal\n};const handleSelectCategory=(categoryId,blockId)=>{markBlockAsUsed(currentQuizId,categoryId,blockId);if(usedBlocksCount===totalBlocks-1){setConfettiRunning(true);setShowEndMessage(true);}handleCloseModal();};const handleTryAgain=()=>{// Закрываем WarningMessage, оставляем Modal\nsetIsBlockUsed(false);};const handleContinue=()=>{// Закрываем WarningMessage и Modal\nhandleCloseModal();};const handleNewGame=()=>{localStorage.removeItem(\"data-\".concat(currentQuizId));localStorage.removeItem(\"usedBlocks-\".concat(currentQuizId));localStorage.removeItem('quizStates');setQuizStates(prevStates=>({...prevStates,[currentQuizId]:{usedBlocks:{},data:null}}));setConfettiRunning(false);setShowEndMessage(false);};const handleMainMenu=function(){let clearState=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(clearState){localStorage.removeItem(\"data-\".concat(currentQuizId));setQuizStates(prevStates=>({...prevStates,[currentQuizId]:{usedBlocks:{},data:null}}));}setShowQuizPage(false);setConfettiRunning(false);};return/*#__PURE__*/_jsxs(\"div\",{className:styles.quiz_page,children:[/*#__PURE__*/_jsx(ConfettiAnimation,{isRunning:confettiRunning}),data?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:PCImage,alt:\"PC horizontal line\",className:styles.image}),/*#__PURE__*/_jsx(ContentContainer,{data:data,onBlockSelect:handleBlockSelect,usedBlocks:currentQuizState.usedBlocks||{}}),selectedBlock&&/*#__PURE__*/_jsx(Modal,{block:selectedBlock,categoryName:(selectedCategory===null||selectedCategory===void 0?void 0:selectedCategory.name)||'Без категории',onClose:handleCloseModal,selectedMode:selectedMode,onSelectCategory:handleSelectCategory,isBlockUsed:isBlockUsed// Передаем флаг использования блока в Modal\n,onTryAgain:handleTryAgain,onContinue:handleContinue})]}):/*#__PURE__*/_jsx(\"div\",{children:\"No data available.\"}),showEndMessage&&/*#__PURE__*/_jsx(EndMessage,{onNewGame:handleNewGame,onMainMenu:()=>handleMainMenu(true)}),/*#__PURE__*/_jsx(MenuModal,{showSettings:()=>setIsSettingsVisible(true),showMainMenu:()=>handleMainMenu(false),onNewGame:handleNewGame,isVisible:isMenuVisible,closeMenuModal:()=>setIsMenuVisible(false)}),isSettingsVisible&&/*#__PURE__*/_jsx(Settings,{onClose:()=>setIsSettingsVisible(false)})]});}export default QuizPage;","map":{"version":3,"names":["React","useMemo","useState","ContentContainer","EndMessage","MenuModal","Modal","Settings","ConfettiAnimation","styles","useQuizContext","PCImage","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","QuizPage","quizStates","setShowQuizPage","currentQuizId","selectedMode","data","markBlockAsUsed","setQuizStates","currentQuizState","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","selectedCategory","setSelectedCategory","confettiRunning","setConfettiRunning","showEndMessage","setShowEndMessage","isMenuVisible","setIsMenuVisible","isBlockUsed","setIsBlockUsed","totalBlocks","reduce","acc","category","blocks","length","usedBlocksCount","Object","values","usedBlocks","categoryBlocks","handleBlockSelect","block","_currentQuizState$use","_currentQuizState$use2","id","includes","handleCloseModal","handleSelectCategory","categoryId","blockId","handleTryAgain","handleContinue","handleNewGame","localStorage","removeItem","concat","prevStates","handleMainMenu","clearState","arguments","undefined","className","quiz_page","children","isRunning","src","alt","image","onBlockSelect","categoryName","name","onClose","onSelectCategory","onTryAgain","onContinue","onNewGame","onMainMenu","showSettings","showMainMenu","isVisible","closeMenuModal"],"sources":["E:/quiz-app-react/src/components/QuizPage/QuizPage.jsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\nimport EndMessage from '../EndMessage/EndMessage';\r\nimport MenuModal from '../MenuModal/MenuModal';\r\nimport Modal from '../Modal/Modal';\r\nimport Settings from '../Settings/Settings';\r\nimport ConfettiAnimation from '../ConfettiAnimation/ConfettiAnimation';\r\nimport styles from './QuizPage.module.css';\r\nimport { useQuizContext } from '../../context/QuizContext';\r\nimport PCImage from '../../images/PC_horizontal_1line_black.svg';\r\n\r\n\r\nfunction QuizPage() {\r\n  const { quizStates, setShowQuizPage, currentQuizId, selectedMode, data, markBlockAsUsed, setQuizStates } = useQuizContext();\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [confettiRunning, setConfettiRunning] = useState(false);\r\n  const [showEndMessage, setShowEndMessage] = useState(false);\r\n  const [isMenuVisible, setIsMenuVisible] = useState(false);\r\n  const [isBlockUsed, setIsBlockUsed] = useState(false); // Для отслеживания использования блока\r\n\r\n\r\n  const totalBlocks = useMemo(() => {\r\n    return data?.reduce((acc, category) => acc + category.blocks.length, 0) || 0;\r\n  }, [data]);\r\n\r\n\r\n  const usedBlocksCount = useMemo(() => {\r\n    return Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n      (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n      0\r\n    );\r\n  }, [currentQuizState]);\r\n\r\n\r\n  // Проверка использования блока до открытия Modal\r\n  const handleBlockSelect = (block, category) => {\r\n    setSelectedBlock(block);\r\n    setSelectedCategory(category);\r\n\r\n\r\n    if (currentQuizState.usedBlocks?.[category.id]?.includes(block.id)) {\r\n      setIsBlockUsed(true); // Блок уже использован\r\n    } else {\r\n      setIsBlockUsed(false); // Блок не использован\r\n    }\r\n  };\r\n\r\n\r\n  const handleCloseModal = () => {\r\n    setSelectedBlock(null);\r\n    setSelectedCategory(null);\r\n    setIsBlockUsed(false); // Сброс состояния при закрытии Modal\r\n  };\r\n\r\n\r\n  const handleSelectCategory = (categoryId, blockId) => {\r\n    markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n\r\n    if (usedBlocksCount === totalBlocks - 1) {\r\n      setConfettiRunning(true);\r\n      setShowEndMessage(true);\r\n    }\r\n\r\n\r\n    handleCloseModal();\r\n  };\r\n\r\n\r\n  const handleTryAgain = () => {\r\n    // Закрываем WarningMessage, оставляем Modal\r\n    setIsBlockUsed(false);\r\n  };\r\n\r\n\r\n  const handleContinue = () => {\r\n    // Закрываем WarningMessage и Modal\r\n    handleCloseModal();\r\n  };\r\n\r\n\r\n  const handleNewGame = () => {\r\n    localStorage.removeItem(`data-${currentQuizId}`);\r\n    localStorage.removeItem(`usedBlocks-${currentQuizId}`);\r\n    localStorage.removeItem('quizStates');\r\n\r\n\r\n    setQuizStates((prevStates) => ({\r\n      ...prevStates,\r\n      [currentQuizId]: {\r\n        usedBlocks: {},\r\n        data: null,\r\n      },\r\n    }));\r\n\r\n\r\n    setConfettiRunning(false);\r\n    setShowEndMessage(false);\r\n  };\r\n\r\n\r\n  const handleMainMenu = (clearState = false) => {\r\n    if (clearState) {\r\n      localStorage.removeItem(`data-${currentQuizId}`);\r\n      setQuizStates((prevStates) => ({\r\n        ...prevStates,\r\n        [currentQuizId]: {\r\n          usedBlocks: {},\r\n          data: null,\r\n        },\r\n      }));\r\n    }\r\n    setShowQuizPage(false);\r\n    setConfettiRunning(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <ConfettiAnimation isRunning={confettiRunning} />\r\n      {data ? (\r\n        <>\r\n          <img src={PCImage} alt=\"PC horizontal line\" className={styles.image} />\r\n          <ContentContainer\r\n            data={data}\r\n            onBlockSelect={handleBlockSelect}\r\n            usedBlocks={currentQuizState.usedBlocks || {}}\r\n          />\r\n\r\n\r\n          {/* Modal открывается для выбранного блока */}\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              categoryName={selectedCategory?.name || 'Без категории'}\r\n              onClose={handleCloseModal}\r\n              selectedMode={selectedMode}\r\n              onSelectCategory={handleSelectCategory}\r\n              isBlockUsed={isBlockUsed} // Передаем флаг использования блока в Modal\r\n              onTryAgain={handleTryAgain}\r\n              onContinue={handleContinue}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n\r\n\r\n      {showEndMessage && (\r\n        <EndMessage\r\n          onNewGame={handleNewGame}\r\n          onMainMenu={() => handleMainMenu(true)}\r\n        />\r\n      )}\r\n\r\n\r\n      <MenuModal\r\n        showSettings={() => setIsSettingsVisible(true)}\r\n        showMainMenu={() => handleMainMenu(false)}\r\n        onNewGame={handleNewGame}\r\n        isVisible={isMenuVisible}\r\n        closeMenuModal={() => setIsMenuVisible(false)}\r\n      />\r\n\r\n\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}