{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport ContentContainer from './ContentContainer';\nimport EndMessage from './EndMessage';\nimport MenuModal from './MenuModal';\nimport Settings from './Settings';\nimport styles from '../styles/QuizPage.module.css';\nimport { useQuizContext } from '../context/QuizContext';\nimport { loadJsonDataByMode } from '../utils/loadJsonData'; // Импорт функции\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    usedBlocks,\n    setUsedBlocks,\n    selectedMode,\n    setShowQuizPage,\n    quizStates,\n    updateQuizState\n  } = useQuizContext();\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [data, setData] = useState(null);\n  const currentQuizState = quizStates[selectedMode] || {}; // Получаем состояние для текущего режима\n\n  useEffect(() => {\n    if (selectedMode) {\n      const selectedData = loadJsonDataByMode(selectedMode);\n      if (selectedData) {\n        setData(selectedData.categories);\n      }\n    }\n  }, [selectedMode]);\n  const markBlockAsUsed = (categoryName, blockId) => {\n    setUsedBlocks(prevUsedBlocks => {\n      const updatedUsedBlocks = {\n        ...prevUsedBlocks\n      };\n      if (!updatedUsedBlocks[categoryName]) {\n        updatedUsedBlocks[categoryName] = [];\n      }\n      updatedUsedBlocks[categoryName].push(blockId);\n      localStorage.setItem('usedBlocks', JSON.stringify(updatedUsedBlocks));\n      return updatedUsedBlocks;\n    });\n  };\n  const showSettings = () => {\n    setIsSettingsVisible(true);\n  };\n  const hideSettings = () => {\n    setIsSettingsVisible(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n      usedBlocks: usedBlocks,\n      markBlockAsUsed: markBlockAsUsed,\n      data: data,\n      mode: selectedMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: showSettings,\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: hideSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"Qz7oRXweVmUvoE5ugTZVI59kreo=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","Header","ContentContainer","EndMessage","MenuModal","Settings","styles","useQuizContext","loadJsonDataByMode","jsxDEV","_jsxDEV","QuizPage","_s","usedBlocks","setUsedBlocks","selectedMode","setShowQuizPage","quizStates","updateQuizState","isSettingsVisible","setIsSettingsVisible","data","setData","currentQuizState","selectedData","categories","markBlockAsUsed","categoryName","blockId","prevUsedBlocks","updatedUsedBlocks","push","localStorage","setItem","JSON","stringify","showSettings","hideSettings","className","quiz_page","children","fileName","_jsxFileName","lineNumber","columnNumber","mode","showMainMenu","onClose","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/QuizPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport ContentContainer from './ContentContainer';\r\nimport EndMessage from './EndMessage';\r\nimport MenuModal from './MenuModal';\r\nimport Settings from './Settings';\r\nimport styles from '../styles/QuizPage.module.css';\r\nimport { useQuizContext } from '../context/QuizContext';\r\nimport { loadJsonDataByMode } from '../utils/loadJsonData'; // Импорт функции\r\n\r\nfunction QuizPage() {\r\n  const { usedBlocks, setUsedBlocks, selectedMode, setShowQuizPage, quizStates, updateQuizState } = useQuizContext();\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  const currentQuizState = quizStates[selectedMode] || {}; // Получаем состояние для текущего режима\r\n\r\n  useEffect(() => {\r\n    if (selectedMode) {\r\n      const selectedData = loadJsonDataByMode(selectedMode);\r\n      if (selectedData) {\r\n        setData(selectedData.categories);\r\n      }\r\n    }\r\n  }, [selectedMode]);\r\n\r\n  const markBlockAsUsed = (categoryName, blockId) => {\r\n    setUsedBlocks((prevUsedBlocks) => {\r\n      const updatedUsedBlocks = { ...prevUsedBlocks };\r\n      if (!updatedUsedBlocks[categoryName]) {\r\n        updatedUsedBlocks[categoryName] = [];\r\n      }\r\n      updatedUsedBlocks[categoryName].push(blockId);\r\n\r\n      localStorage.setItem('usedBlocks', JSON.stringify(updatedUsedBlocks));\r\n      return updatedUsedBlocks;\r\n    });\r\n  };\r\n\r\n  const showSettings = () => {\r\n    setIsSettingsVisible(true);\r\n  };\r\n\r\n  const hideSettings = () => {\r\n    setIsSettingsVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <Header />\r\n      <ContentContainer\r\n        usedBlocks={usedBlocks}\r\n        markBlockAsUsed={markBlockAsUsed}\r\n        data={data}\r\n        mode={selectedMode}\r\n      />\r\n      <EndMessage />\r\n      <MenuModal showSettings={showSettings} showMainMenu={() => setShowQuizPage(false)} />\r\n      {isSettingsVisible && <Settings onClose={hideSettings} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}