{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\app-quiz-react-project\\\\quiz-app\\\\src\\\\components\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport Header from './Header';\nimport ContentContainer from './ContentContainer';\nimport EndMessage from './EndMessage';\nimport MenuModal from './MenuModal';\nimport Settings from './Settings';\nimport styles from '../styles/QuizPage.module.css';\nimport { useQuizContext } from '../context/QuizContext';\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    quizStates,\n    updateQuizState,\n    setShowQuizPage,\n    selectedMode,\n    currentQuizId\n  } = useQuizContext();\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\n  const [data, setData] = useState(currentQuizState.data || null);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  useEffect(() => {\n    if (!data && currentQuizId && selectedMode) {\n      const selectedData = loadJsonDataByMode(selectedMode);\n      if (selectedData) {\n        setData(selectedData.categories);\n        updateQuizState(currentQuizId, {\n          data: selectedData.categories\n        });\n      }\n    }\n  }, [data, currentQuizId, selectedMode, updateQuizState]);\n  const handleModalClose = () => {\n    setSelectedBlock(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(ContentContainer, {\n      data: data,\n      setSelectedBlock: setSelectedBlock\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => setIsSettingsVisible(true),\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => setIsSettingsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }, this), selectedBlock && /*#__PURE__*/_jsxDEV(Modal, {\n      block: selectedBlock,\n      onClose: handleModalClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"BbP2iiD+53xQtRk/HfkV4pTF50A=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Header","ContentContainer","EndMessage","MenuModal","Settings","styles","useQuizContext","loadJsonDataByMode","jsxDEV","_jsxDEV","QuizPage","_s","quizStates","updateQuizState","setShowQuizPage","selectedMode","currentQuizId","currentQuizState","data","setData","selectedBlock","setSelectedBlock","isSettingsVisible","setIsSettingsVisible","selectedData","categories","handleModalClose","className","quiz_page","children","fileName","_jsxFileName","lineNumber","columnNumber","showSettings","showMainMenu","onClose","Modal","block","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/app-quiz-react-project/quiz-app/src/components/QuizPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport Header from './Header';\r\nimport ContentContainer from './ContentContainer';\r\nimport EndMessage from './EndMessage';\r\nimport MenuModal from './MenuModal';\r\nimport Settings from './Settings';\r\nimport styles from '../styles/QuizPage.module.css';\r\nimport { useQuizContext } from '../context/QuizContext';\r\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\r\n\r\nfunction QuizPage() {\r\n  const { quizStates, updateQuizState, setShowQuizPage, selectedMode, currentQuizId } = useQuizContext();\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [data, setData] = useState(currentQuizState.data || null);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!data && currentQuizId && selectedMode) {\r\n      const selectedData = loadJsonDataByMode(selectedMode);\r\n      if (selectedData) {\r\n        setData(selectedData.categories);\r\n        updateQuizState(currentQuizId, { data: selectedData.categories });\r\n      }\r\n    }\r\n  }, [data, currentQuizId, selectedMode, updateQuizState]);\r\n\r\n  const handleModalClose = () => {\r\n    setSelectedBlock(null);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <Header />\r\n      {data ? (\r\n        <ContentContainer\r\n          data={data}\r\n          setSelectedBlock={setSelectedBlock}\r\n        />\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n      <EndMessage />\r\n      <MenuModal showSettings={() => setIsSettingsVisible(true)} showMainMenu={() => setShowQuizPage(false)} />\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n      {selectedBlock && (\r\n        <Modal\r\n          block={selectedBlock}\r\n          onClose={handleModalClose}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}