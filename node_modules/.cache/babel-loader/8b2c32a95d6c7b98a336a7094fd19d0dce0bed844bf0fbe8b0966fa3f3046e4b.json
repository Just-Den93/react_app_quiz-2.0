{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\context\\\\QuizContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizContext = /*#__PURE__*/createContext();\nexport function useQuizContext() {\n  _s();\n  return useContext(QuizContext);\n}\n_s(useQuizContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function QuizProvider({\n  children\n}) {\n  _s2();\n  const [showQuizPage, setShowQuizPage] = useState(false);\n  const [selectedMode, setSelectedMode] = useState(null);\n  const [currentQuizId, setCurrentQuizId] = useState(null);\n  const [quizStates, setQuizStates] = useState({});\n  const [gamesCompleted, setGamesCompleted] = useState(0); // Состояние для количества игр\n\n  // Проверяем, если все блоки использованы, увеличиваем количество игр\n  useEffect(() => {\n    const quizState = quizStates[currentQuizId];\n    if (quizState && quizState.usedBlocks) {\n      const totalBlocks = Object.values(quizState.usedBlocks).flat().length;\n      const totalCategories = Object.keys(quizState.usedBlocks).length;\n      const allBlocksUsed = totalBlocks === totalCategories;\n      if (allBlocksUsed) {\n        setGamesCompleted(prev => prev + 1);\n      }\n    }\n  }, [quizStates, currentQuizId]);\n  return /*#__PURE__*/_jsxDEV(QuizContext.Provider, {\n    value: {\n      showQuizPage,\n      setShowQuizPage,\n      selectedMode,\n      setSelectedMode,\n      currentQuizId,\n      setCurrentQuizId,\n      quizStates,\n      setQuizStates,\n      gamesCompleted // Передаем количество игр в контекст\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s2(QuizProvider, \"k4kRgHxwVTR+Yzim4G10e73jECo=\");\n_c = QuizProvider;\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","QuizContext","useQuizContext","_s","QuizProvider","children","_s2","showQuizPage","setShowQuizPage","selectedMode","setSelectedMode","currentQuizId","setCurrentQuizId","quizStates","setQuizStates","gamesCompleted","setGamesCompleted","quizState","usedBlocks","totalBlocks","Object","values","flat","length","totalCategories","keys","allBlocksUsed","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/context/QuizContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst QuizContext = createContext();\r\n\r\nexport function useQuizContext() {\r\n  return useContext(QuizContext);\r\n}\r\n\r\nexport function QuizProvider({ children }) {\r\n  const [showQuizPage, setShowQuizPage] = useState(false);\r\n  const [selectedMode, setSelectedMode] = useState(null);\r\n  const [currentQuizId, setCurrentQuizId] = useState(null);\r\n  const [quizStates, setQuizStates] = useState({});\r\n  const [gamesCompleted, setGamesCompleted] = useState(0); // Состояние для количества игр\r\n\r\n  // Проверяем, если все блоки использованы, увеличиваем количество игр\r\n  useEffect(() => {\r\n    const quizState = quizStates[currentQuizId];\r\n    if (quizState && quizState.usedBlocks) {\r\n      const totalBlocks = Object.values(quizState.usedBlocks).flat().length;\r\n      const totalCategories = Object.keys(quizState.usedBlocks).length;\r\n      const allBlocksUsed = totalBlocks === totalCategories;\r\n      if (allBlocksUsed) {\r\n        setGamesCompleted(prev => prev + 1);\r\n      }\r\n    }\r\n  }, [quizStates, currentQuizId]);\r\n\r\n  return (\r\n    <QuizContext.Provider value={{\r\n      showQuizPage,\r\n      setShowQuizPage,\r\n      selectedMode,\r\n      setSelectedMode,\r\n      currentQuizId,\r\n      setCurrentQuizId,\r\n      quizStates,\r\n      setQuizStates,\r\n      gamesCompleted, // Передаем количество игр в контекст\r\n    }}>\r\n      {children}\r\n    </QuizContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASO,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC/B,OAAOP,UAAU,CAACK,WAAW,CAAC;AAChC;AAACE,EAAA,CAFeD,cAAc;AAI9B,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEzD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMmB,SAAS,GAAGJ,UAAU,CAACF,aAAa,CAAC;IAC3C,IAAIM,SAAS,IAAIA,SAAS,CAACC,UAAU,EAAE;MACrC,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACJ,SAAS,CAACC,UAAU,CAAC,CAACI,IAAI,CAAC,CAAC,CAACC,MAAM;MACrE,MAAMC,eAAe,GAAGJ,MAAM,CAACK,IAAI,CAACR,SAAS,CAACC,UAAU,CAAC,CAACK,MAAM;MAChE,MAAMG,aAAa,GAAGP,WAAW,KAAKK,eAAe;MACrD,IAAIE,aAAa,EAAE;QACjBV,iBAAiB,CAACW,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MACrC;IACF;EACF,CAAC,EAAE,CAACd,UAAU,EAAEF,aAAa,CAAC,CAAC;EAE/B,oBACEX,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAC3BtB,YAAY;MACZC,eAAe;MACfC,YAAY;MACZC,eAAe;MACfC,aAAa;MACbC,gBAAgB;MAChBC,UAAU;MACVC,aAAa;MACbC,cAAc,CAAE;IAClB,CAAE;IAAAV,QAAA,EACCA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAAC3B,GAAA,CAnCeF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}