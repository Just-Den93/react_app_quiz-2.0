{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport ContentContainer from './ContentContainer';\nimport EndMessage from './EndMessage';\nimport MenuModal from './MenuModal';\nimport Settings from './Settings';\nimport styles from '../styles/App.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [usedBlocks, setUsedBlocks] = useState(() => {\n    const saved = localStorage.getItem('usedBlocks');\n    return saved ? JSON.parse(saved) : {};\n  });\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [mode, setMode] = useState(() => {\n    const saved = localStorage.getItem('mode');\n    return saved || 'qa';\n  });\n  const markBlockAsUsed = (categoryName, blockId) => {\n    setUsedBlocks(prevUsedBlocks => {\n      const updatedUsedBlocks = {\n        ...prevUsedBlocks\n      };\n      if (!updatedUsedBlocks[categoryName]) {\n        updatedUsedBlocks[categoryName] = [];\n      }\n      updatedUsedBlocks[categoryName].push(blockId);\n      localStorage.setItem('usedBlocks', JSON.stringify(updatedUsedBlocks));\n      return updatedUsedBlocks;\n    });\n  };\n  useEffect(() => {\n    localStorage.setItem('usedBlocks', JSON.stringify(usedBlocks));\n  }, [usedBlocks]);\n  const showSettings = () => {\n    setIsSettingsVisible(true);\n  };\n  const hideSettings = () => {\n    setIsSettingsVisible(false);\n  };\n  const handleModeChange = newMode => {\n    setMode(newMode);\n    localStorage.setItem('mode', newMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.app,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n      usedBlocks: usedBlocks,\n      markBlockAsUsed: markBlockAsUsed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: showSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: hideSettings,\n      onModeChange: handleModeChange,\n      currentMode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Gc589k6arws+0fT1v/rqHiAYOgc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","ContentContainer","EndMessage","MenuModal","Settings","styles","jsxDEV","_jsxDEV","App","_s","usedBlocks","setUsedBlocks","saved","localStorage","getItem","JSON","parse","isSettingsVisible","setIsSettingsVisible","mode","setMode","markBlockAsUsed","categoryName","blockId","prevUsedBlocks","updatedUsedBlocks","push","setItem","stringify","showSettings","hideSettings","handleModeChange","newMode","className","app","children","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onModeChange","currentMode","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport ContentContainer from './ContentContainer';\r\nimport EndMessage from './EndMessage';\r\nimport MenuModal from './MenuModal';\r\nimport Settings from './Settings';\r\nimport styles from '../styles/App.module.css';\r\n\r\nfunction App() {\r\n  const [usedBlocks, setUsedBlocks] = useState(() => {\r\n    const saved = localStorage.getItem('usedBlocks');\r\n    return saved ? JSON.parse(saved) : {};\r\n  });\r\n\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [mode, setMode] = useState(() => {\r\n    const saved = localStorage.getItem('mode');\r\n    return saved || 'qa';\r\n  });\r\n\r\n  const markBlockAsUsed = (categoryName, blockId) => {\r\n    setUsedBlocks((prevUsedBlocks) => {\r\n      const updatedUsedBlocks = { ...prevUsedBlocks };\r\n      if (!updatedUsedBlocks[categoryName]) {\r\n        updatedUsedBlocks[categoryName] = [];\r\n      }\r\n      updatedUsedBlocks[categoryName].push(blockId);\r\n\r\n      localStorage.setItem('usedBlocks', JSON.stringify(updatedUsedBlocks));\r\n      return updatedUsedBlocks;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('usedBlocks', JSON.stringify(usedBlocks));\r\n  }, [usedBlocks]);\r\n\r\n  const showSettings = () => {\r\n    setIsSettingsVisible(true);\r\n  };\r\n\r\n  const hideSettings = () => {\r\n    setIsSettingsVisible(false);\r\n  };\r\n\r\n  const handleModeChange = (newMode) => {\r\n    setMode(newMode);\r\n    localStorage.setItem('mode', newMode);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.app}>\r\n      <Header />\r\n      <ContentContainer usedBlocks={usedBlocks} markBlockAsUsed={markBlockAsUsed} />\r\n      <EndMessage />\r\n      <MenuModal showSettings={showSettings} />\r\n      {isSettingsVisible && <Settings onClose={hideSettings} onModeChange={handleModeChange} currentMode={mode} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}