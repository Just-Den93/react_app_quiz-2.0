{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { loadJsonDataFiles } from '../utils/loadJsonData';\n\n// Define the initial state and reducers using createSlice\nconst quizSlice = createSlice({\n  name: 'quiz',\n  initialState: {},\n  reducers: {\n    setQuizState: (state, action) => {\n      state[action.payload.mode] = {\n        ...state[action.payload.mode],\n        ...action.payload.state\n      };\n    },\n    markBlockAsUsed: (state, action) => {\n      if (!state[action.payload.mode]) {\n        return; // or handle it appropriately\n      }\n      const modeState = state[action.payload.mode];\n      if (!modeState.usedBlocks) {\n        modeState.usedBlocks = {};\n      }\n      if (!modeState.usedBlocks[action.payload.categoryName]) {\n        modeState.usedBlocks[action.payload.categoryName] = [];\n      }\n      modeState.usedBlocks[action.payload.categoryName].push(action.payload.blockId);\n    }\n  }\n});\n\n// Export actions\nexport const {\n  setQuizState,\n  markBlockAsUsed\n} = quizSlice.actions;\n\n// Create the Redux store\nconst store = configureStore({\n  reducer: {\n    quiz: quizSlice.reducer\n  },\n  middleware: [thunk]\n});\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","thunk","loadJsonDataFiles","quizSlice","name","initialState","reducers","setQuizState","state","action","payload","mode","markBlockAsUsed","modeState","usedBlocks","categoryName","push","blockId","actions","store","reducer","quiz","middleware"],"sources":["E:/quiz-app-react/src/store/store.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\nimport thunk from 'redux-thunk';\r\nimport { loadJsonDataFiles } from '../utils/loadJsonData';\r\n\r\n// Define the initial state and reducers using createSlice\r\nconst quizSlice = createSlice({\r\n  name: 'quiz',\r\n  initialState: {},\r\n  reducers: {\r\n    setQuizState: (state, action) => {\r\n      state[action.payload.mode] = {\r\n        ...state[action.payload.mode],\r\n        ...action.payload.state,\r\n      };\r\n    },\r\n    markBlockAsUsed: (state, action) => {\r\n      if (!state[action.payload.mode]) {\r\n        return; // or handle it appropriately\r\n      }\r\n      const modeState = state[action.payload.mode];\r\n      if (!modeState.usedBlocks) {\r\n        modeState.usedBlocks = {};\r\n      }\r\n      if (!modeState.usedBlocks[action.payload.categoryName]) {\r\n        modeState.usedBlocks[action.payload.categoryName] = [];\r\n      }\r\n      modeState.usedBlocks[action.payload.categoryName].push(action.payload.blockId);\r\n    },\r\n  },\r\n});\r\n\r\n// Export actions\r\nexport const { setQuizState, markBlockAsUsed } = quizSlice.actions;\r\n\r\n// Create the Redux store\r\nconst store = configureStore({\r\n  reducer: {\r\n    quiz: quizSlice.reducer,\r\n  },\r\n  middleware: [thunk],\r\n});\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC9D,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,iBAAiB,QAAQ,uBAAuB;;AAEzD;AACA,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE,CAAC,CAAC;EAChBC,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACC,MAAM,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG;QAC3B,GAAGH,KAAK,CAACC,MAAM,CAACC,OAAO,CAACC,IAAI,CAAC;QAC7B,GAAGF,MAAM,CAACC,OAAO,CAACF;MACpB,CAAC;IACH,CAAC;IACDI,eAAe,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAClC,IAAI,CAACD,KAAK,CAACC,MAAM,CAACC,OAAO,CAACC,IAAI,CAAC,EAAE;QAC/B,OAAO,CAAC;MACV;MACA,MAAME,SAAS,GAAGL,KAAK,CAACC,MAAM,CAACC,OAAO,CAACC,IAAI,CAAC;MAC5C,IAAI,CAACE,SAAS,CAACC,UAAU,EAAE;QACzBD,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC;MAC3B;MACA,IAAI,CAACD,SAAS,CAACC,UAAU,CAACL,MAAM,CAACC,OAAO,CAACK,YAAY,CAAC,EAAE;QACtDF,SAAS,CAACC,UAAU,CAACL,MAAM,CAACC,OAAO,CAACK,YAAY,CAAC,GAAG,EAAE;MACxD;MACAF,SAAS,CAACC,UAAU,CAACL,MAAM,CAACC,OAAO,CAACK,YAAY,CAAC,CAACC,IAAI,CAACP,MAAM,CAACC,OAAO,CAACO,OAAO,CAAC;IAChF;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEV,YAAY;EAAEK;AAAgB,CAAC,GAAGT,SAAS,CAACe,OAAO;;AAElE;AACA,MAAMC,KAAK,GAAGpB,cAAc,CAAC;EAC3BqB,OAAO,EAAE;IACPC,IAAI,EAAElB,SAAS,CAACiB;EAClB,CAAC;EACDE,UAAU,EAAE,CAACrB,KAAK;AACpB,CAAC,CAAC;AAEF,eAAekB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}