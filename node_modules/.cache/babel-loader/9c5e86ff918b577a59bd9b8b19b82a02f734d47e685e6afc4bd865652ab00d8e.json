{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\QuizPage\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from 'react';\nimport ContentContainer from '../ContentContainer/ContentContainer';\nimport EndMessage from '../EndMessage/EndMessage';\nimport MenuModal from '../MenuModal/MenuModal';\nimport Modal from '../Modal/Modal';\nimport Settings from '../Settings/Settings';\nimport ConfettiAnimation from '../ConfettiAnimation/ConfettiAnimation'; // Импортируем компонент конфетти\nimport styles from './QuizPage.module.css';\nimport { useQuizContext } from '../../context/QuizContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    quizStates,\n    setShowQuizPage,\n    currentQuizId,\n    selectedMode,\n    data,\n    markBlockAsUsed\n  } = useQuizContext();\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [isConfettiRunning, setIsConfettiRunning] = useState(false); // Состояние для конфетти\n\n  const handleBlockSelect = (block, category) => {\n    setSelectedBlock(block);\n    setSelectedCategory(category);\n  };\n  const handleCloseModal = () => {\n    setSelectedBlock(null);\n    setSelectedCategory(null);\n  };\n  const handleSelectCategory = (categoryId, blockId) => {\n    markBlockAsUsed(currentQuizId, categoryId, blockId); // Отмечаем блок как использованный\n    handleCloseModal(); // Закрываем модальное окно после выбора категории\n  };\n  const toggleConfetti = () => {\n    setIsConfettiRunning(prevState => !prevState); // Переключаем состояние анимации\n  };\n  useEffect(() => {\n    console.log('Data in QuizPage:', data);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ContentContainer, {\n        data: data,\n        onBlockSelect: handleBlockSelect,\n        usedBlocks: currentQuizState.usedBlocks || {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), selectedBlock && /*#__PURE__*/_jsxDEV(Modal, {\n        block: selectedBlock,\n        categoryName: (selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.name) || 'Без категории' // Проверяем categoryName\n        ,\n        onClose: handleCloseModal,\n        selectedMode: selectedMode,\n        onSelectCategory: handleSelectCategory // Передаем функцию для обработки выбора категории\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => setIsSettingsVisible(true),\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => setIsSettingsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleConfetti,\n      children: isConfettiRunning ? 'Остановить конфетти' : 'Запустить конфетти'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfettiAnimation, {\n      isRunning: isConfettiRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"/0+6OIcbOJHt/mRLbYM5BhYNv9A=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","ContentContainer","EndMessage","MenuModal","Modal","Settings","ConfettiAnimation","styles","useQuizContext","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","_s","quizStates","setShowQuizPage","currentQuizId","selectedMode","data","markBlockAsUsed","currentQuizState","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","selectedCategory","setSelectedCategory","isConfettiRunning","setIsConfettiRunning","handleBlockSelect","block","category","handleCloseModal","handleSelectCategory","categoryId","blockId","toggleConfetti","prevState","console","log","className","quiz_page","children","onBlockSelect","usedBlocks","fileName","_jsxFileName","lineNumber","columnNumber","categoryName","name","onClose","onSelectCategory","showSettings","showMainMenu","onClick","isRunning","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/QuizPage/QuizPage.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\nimport EndMessage from '../EndMessage/EndMessage';\r\nimport MenuModal from '../MenuModal/MenuModal';\r\nimport Modal from '../Modal/Modal';\r\nimport Settings from '../Settings/Settings';\r\nimport ConfettiAnimation from '../ConfettiAnimation/ConfettiAnimation'; // Импортируем компонент конфетти\r\nimport styles from './QuizPage.module.css';\r\nimport { useQuizContext } from '../../context/QuizContext';\r\n\r\nfunction QuizPage() {\r\n  const { quizStates, setShowQuizPage, currentQuizId, selectedMode, data, markBlockAsUsed } = useQuizContext();\r\n\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [isConfettiRunning, setIsConfettiRunning] = useState(false); // Состояние для конфетти\r\n\r\n  const handleBlockSelect = (block, category) => {\r\n    setSelectedBlock(block);\r\n    setSelectedCategory(category);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setSelectedBlock(null);\r\n    setSelectedCategory(null);\r\n  };\r\n\r\n  const handleSelectCategory = (categoryId, blockId) => {\r\n    markBlockAsUsed(currentQuizId, categoryId, blockId);  // Отмечаем блок как использованный\r\n    handleCloseModal();  // Закрываем модальное окно после выбора категории\r\n  };\r\n\r\n  const toggleConfetti = () => {\r\n    setIsConfettiRunning(prevState => !prevState); // Переключаем состояние анимации\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Data in QuizPage:', data);\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      {data ? (\r\n        <>\r\n          <ContentContainer \r\n            data={data} \r\n            onBlockSelect={handleBlockSelect} \r\n            usedBlocks={currentQuizState.usedBlocks || {}} \r\n          />\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              categoryName={selectedCategory?.name || 'Без категории'} // Проверяем categoryName\r\n              onClose={handleCloseModal}\r\n              selectedMode={selectedMode}\r\n              onSelectCategory={handleSelectCategory}  // Передаем функцию для обработки выбора категории\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n      <EndMessage />\r\n      <MenuModal \r\n        showSettings={() => setIsSettingsVisible(true)} \r\n        showMainMenu={() => setShowQuizPage(false)} \r\n      />\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n\r\n      {/* Кнопка для включения и выключения анимации конфетти */}\r\n      <button onClick={toggleConfetti}>\r\n        {isConfettiRunning ? 'Остановить конфетти' : 'Запустить конфетти'}\r\n      </button>\r\n\r\n      {/* Запускаем анимацию конфетти, если isConfettiRunning = true */}\r\n      <ConfettiAnimation isRunning={isConfettiRunning} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}