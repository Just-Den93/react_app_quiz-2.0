{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\App.jsx\",\n  _s = $RefreshSig$();\n// src/components/App.jsx\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport ContentContainer from './ContentContainer';\nimport EndMessage from './EndMessage';\nimport MenuModal from './MenuModal';\nimport Settings from './Settings';\nimport styles from '../styles/App.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [usedBlocks, setUsedBlocks] = useState(() => {\n    const saved = localStorage.getItem('usedBlocks');\n    return saved ? JSON.parse(saved) : {};\n  });\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [selectedMode, setSelectedMode] = useState('QAMode');\n  const markBlockAsUsed = (categoryId, blockId) => {\n    setUsedBlocks(prevUsedBlocks => {\n      const updatedUsedBlocks = {\n        ...prevUsedBlocks\n      };\n      if (!updatedUsedBlocks[categoryId]) {\n        updatedUsedBlocks[categoryId] = [];\n      }\n      if (!updatedUsedBlocks[categoryId].includes(blockId)) {\n        updatedUsedBlocks[categoryId].push(blockId);\n      }\n    });\n  };\n  useEffect(() => {\n    localStorage.setItem('usedBlocks', JSON.stringify(usedBlocks));\n  }, [usedBlocks]);\n  const showSettings = () => {\n    setIsSettingsVisible(true);\n  };\n  const hideSettings = () => {\n    setIsSettingsVisible(false);\n  };\n  const resetGame = () => {\n    setUsedBlocks({});\n    localStorage.removeItem('usedBlocks');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.app,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n      usedBlocks: usedBlocks,\n      markBlockAsUsed: markBlockAsUsed,\n      selectedMode: selectedMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: showSettings,\n      resetGame: resetGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: hideSettings,\n      selectedMode: selectedMode,\n      setSelectedMode: setSelectedMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XENva3PX+wqbqe6e96kj+eD1UfQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","ContentContainer","EndMessage","MenuModal","Settings","styles","jsxDEV","_jsxDEV","App","_s","usedBlocks","setUsedBlocks","saved","localStorage","getItem","JSON","parse","isSettingsVisible","setIsSettingsVisible","selectedMode","setSelectedMode","markBlockAsUsed","categoryId","blockId","prevUsedBlocks","updatedUsedBlocks","includes","push","setItem","stringify","showSettings","hideSettings","resetGame","removeItem","className","app","children","fileName","_jsxFileName","lineNumber","columnNumber","onClose","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/App.jsx"],"sourcesContent":["// src/components/App.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport ContentContainer from './ContentContainer';\r\nimport EndMessage from './EndMessage';\r\nimport MenuModal from './MenuModal';\r\nimport Settings from './Settings';\r\nimport styles from '../styles/App.module.css';\r\n\r\nfunction App() {\r\n  const [usedBlocks, setUsedBlocks] = useState(() => {\r\n    const saved = localStorage.getItem('usedBlocks');\r\n    return saved ? JSON.parse(saved) : {};\r\n  });\r\n\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedMode, setSelectedMode] = useState('QAMode');\r\n\r\n  const markBlockAsUsed = (categoryId, blockId) => {\r\n    setUsedBlocks((prevUsedBlocks) => {\r\n      const updatedUsedBlocks = { ...prevUsedBlocks };\r\n      if (!updatedUsedBlocks[categoryId]) {\r\n        updatedUsedBlocks[categoryId] = [];\r\n      }\r\n      if (!updatedUsedBlocks[categoryId].includes(blockId)) {\r\n        updatedUsedBlocks[categoryId].push(blockId);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('usedBlocks', JSON.stringify(usedBlocks));\r\n  }, [usedBlocks]);\r\n\r\n  const showSettings = () => {\r\n    setIsSettingsVisible(true);\r\n  };\r\n\r\n  const hideSettings = () => {\r\n    setIsSettingsVisible(false);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setUsedBlocks({});\r\n    localStorage.removeItem('usedBlocks');\r\n  };\r\n\r\n  return (\r\n    <div className={styles.app}>\r\n      <Header />\r\n      <ContentContainer usedBlocks={usedBlocks} markBlockAsUsed={markBlockAsUsed} selectedMode={selectedMode} />\r\n      <EndMessage />\r\n      <MenuModal showSettings={showSettings} resetGame={resetGame} />\r\n      {isSettingsVisible && (\r\n        <Settings\r\n          onClose={hideSettings}\r\n          selectedMode={selectedMode}\r\n          setSelectedMode={setSelectedMode}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}