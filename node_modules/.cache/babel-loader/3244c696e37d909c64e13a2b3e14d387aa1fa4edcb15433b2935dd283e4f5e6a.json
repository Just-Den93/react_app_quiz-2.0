{"ast":null,"code":"// import React, { useMemo, useState } from 'react';\n// import ContentContainer from '../../../layout/ContentContainer/ContentContainer';\n// import EndMessage from '../../Game/Messages/EndMessage/EndMessage';\n// import MenuModal from '../../../common/MenuModal/MenuModal';\n// import Modal from '../../../common/Modal/Modal';\n// import Settings from '../../../features/Game/Settings/Settings';\n// import ConfettiAnimation from '../../Game/Animation/ConfettiAnimation';\n// import styles from './QuizPage.module.css';\n// import { useQuizContext } from '../../../../context/QuizContext';\n// import PCImage from '../../../../assets/images/PC_horizontal_1line_black.svg';\n// import {\n//   getTotalBlocks,\n//   getUsedBlocksCount,\n//   handleBlockSelect,\n//   handleCloseModal,\n//   handleNewGame,\n//   handleMainMenu as quizPageHandleMainMenu,\n//   handleSelectCategory\n// } from './quizPageUtils';\n\n// function QuizPage() {\n//   const { quizStates, setShowQuizPage, currentQuizId, selectedMode, data, markBlockAsUsed, setQuizStates } = useQuizContext();\n\n//   // Логируем состояние викторины\n//   console.log('QuizPage: currentQuizId', currentQuizId);\n//   console.log('QuizPage: quizStates', quizStates);\n\n//   const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\n//   const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n//   const [selectedBlock, setSelectedBlock] = useState(null);\n//   const [selectedCategory, setSelectedCategory] = useState(null);\n//   const [confettiRunning, setConfettiRunning] = useState(false);\n//   const [showEndMessage, setShowEndMessage] = useState(false);\n//   const [isMenuVisible, setIsMenuVisible] = useState(false);\n//   const [isBlockUsed, setIsBlockUsed] = useState(false);\n\n//   const totalBlocks = useMemo(() => getTotalBlocks(data), [data]);\n//   const usedBlocksCount = useMemo(() => getUsedBlocksCount(currentQuizState), [currentQuizState]);\n\n//   // Логируем общее количество блоков и использованные блоки\n//   console.log('Total blocks:', totalBlocks);\n//   console.log('Used blocks count:', usedBlocksCount);\n\n//   const handleMainMenu = () => {\n//     console.log('QuizPage: handleMainMenu called');\n//     setShowQuizPage(false);\n//   };\n\n//   return (\n//     <div className={styles.quiz_page}>\n//       <ConfettiAnimation isRunning={confettiRunning} />\n//       {data ? (\n//         <>\n//           <img src={PCImage} alt=\"PC horizontal line\" className={styles.image} />\n//           <ContentContainer\n//             data={data}\n//             onBlockSelect={(block, category) =>\n//               handleBlockSelect(\n//                 block,\n//                 category,\n//                 currentQuizState,\n//                 setSelectedBlock,\n//                 setSelectedCategory,\n//                 setIsBlockUsed\n//               )\n//             }\n//             usedBlocks={currentQuizState.usedBlocks || {}}\n//           />\n\n//           {selectedBlock && (\n//             <Modal\n//               block={selectedBlock}\n//               categoryName={selectedCategory?.name || 'Без категории'}\n//               onClose={() => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)}\n//               selectedMode={selectedMode}\n//               onSelectCategory={(categoryId, blockId) =>\n//                 handleSelectCategory(\n//                   categoryId,\n//                   blockId,\n//                   currentQuizId,\n//                   markBlockAsUsed,\n//                   totalBlocks,\n//                   usedBlocksCount,\n//                   setConfettiRunning,\n//                   setShowEndMessage,\n//                   () => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)\n//                 )\n//               }\n//               isBlockUsed={isBlockUsed}\n//               onTryAgain={() => setIsBlockUsed(false)}\n//               onContinue={() => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)}\n//             />\n//           )}\n//         </>\n//       ) : (\n//         <div>No data available.</div>\n//       )}\n\n//       {showEndMessage && (\n//         <EndMessage\n//           currentQuizId={currentQuizId}\n//           setQuizStates={setQuizStates}\n//           onNewGame={() => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage)}\n//           onMainMenu={handleMainMenu}\n//         />\n//       )}\n\n//       <MenuModal\n//         showSettings={() => setIsSettingsVisible(true)}\n//         showMainMenu={handleMainMenu}\n//         onNewGame={() => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage)}\n//         isVisible={isMenuVisible}\n//         closeMenuModal={() => setIsMenuVisible(false)}\n//       />\n\n//       {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\n//     </div>\n//   );\n// }\n\n// export default QuizPage;","map":{"version":3,"names":[],"sources":["E:/quiz-app-react/src/components/features/Quiz/QuizPage/QuizPage.jsx"],"sourcesContent":["// import React, { useMemo, useState } from 'react';\r\n// import ContentContainer from '../../../layout/ContentContainer/ContentContainer';\r\n// import EndMessage from '../../Game/Messages/EndMessage/EndMessage';\r\n// import MenuModal from '../../../common/MenuModal/MenuModal';\r\n// import Modal from '../../../common/Modal/Modal';\r\n// import Settings from '../../../features/Game/Settings/Settings';\r\n// import ConfettiAnimation from '../../Game/Animation/ConfettiAnimation';\r\n// import styles from './QuizPage.module.css';\r\n// import { useQuizContext } from '../../../../context/QuizContext';\r\n// import PCImage from '../../../../assets/images/PC_horizontal_1line_black.svg';\r\n// import {\r\n//   getTotalBlocks,\r\n//   getUsedBlocksCount,\r\n//   handleBlockSelect,\r\n//   handleCloseModal,\r\n//   handleNewGame,\r\n//   handleMainMenu as quizPageHandleMainMenu,\r\n//   handleSelectCategory\r\n// } from './quizPageUtils';\r\n\r\n// function QuizPage() {\r\n//   const { quizStates, setShowQuizPage, currentQuizId, selectedMode, data, markBlockAsUsed, setQuizStates } = useQuizContext();\r\n\r\n//   // Логируем состояние викторины\r\n//   console.log('QuizPage: currentQuizId', currentQuizId);\r\n//   console.log('QuizPage: quizStates', quizStates);\r\n\r\n//   const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n//   const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n//   const [selectedBlock, setSelectedBlock] = useState(null);\r\n//   const [selectedCategory, setSelectedCategory] = useState(null);\r\n//   const [confettiRunning, setConfettiRunning] = useState(false);\r\n//   const [showEndMessage, setShowEndMessage] = useState(false);\r\n//   const [isMenuVisible, setIsMenuVisible] = useState(false);\r\n//   const [isBlockUsed, setIsBlockUsed] = useState(false);\r\n\r\n//   const totalBlocks = useMemo(() => getTotalBlocks(data), [data]);\r\n//   const usedBlocksCount = useMemo(() => getUsedBlocksCount(currentQuizState), [currentQuizState]);\r\n\r\n//   // Логируем общее количество блоков и использованные блоки\r\n//   console.log('Total blocks:', totalBlocks);\r\n//   console.log('Used blocks count:', usedBlocksCount);\r\n\r\n//   const handleMainMenu = () => {\r\n//     console.log('QuizPage: handleMainMenu called');\r\n//     setShowQuizPage(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={styles.quiz_page}>\r\n//       <ConfettiAnimation isRunning={confettiRunning} />\r\n//       {data ? (\r\n//         <>\r\n//           <img src={PCImage} alt=\"PC horizontal line\" className={styles.image} />\r\n//           <ContentContainer\r\n//             data={data}\r\n//             onBlockSelect={(block, category) =>\r\n//               handleBlockSelect(\r\n//                 block,\r\n//                 category,\r\n//                 currentQuizState,\r\n//                 setSelectedBlock,\r\n//                 setSelectedCategory,\r\n//                 setIsBlockUsed\r\n//               )\r\n//             }\r\n//             usedBlocks={currentQuizState.usedBlocks || {}}\r\n//           />\r\n\r\n//           {selectedBlock && (\r\n//             <Modal\r\n//               block={selectedBlock}\r\n//               categoryName={selectedCategory?.name || 'Без категории'}\r\n//               onClose={() => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)}\r\n//               selectedMode={selectedMode}\r\n//               onSelectCategory={(categoryId, blockId) =>\r\n//                 handleSelectCategory(\r\n//                   categoryId,\r\n//                   blockId,\r\n//                   currentQuizId,\r\n//                   markBlockAsUsed,\r\n//                   totalBlocks,\r\n//                   usedBlocksCount,\r\n//                   setConfettiRunning,\r\n//                   setShowEndMessage,\r\n//                   () => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)\r\n//                 )\r\n//               }\r\n//               isBlockUsed={isBlockUsed}\r\n//               onTryAgain={() => setIsBlockUsed(false)}\r\n//               onContinue={() => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)}\r\n//             />\r\n//           )}\r\n//         </>\r\n//       ) : (\r\n//         <div>No data available.</div>\r\n//       )}\r\n\r\n//       {showEndMessage && (\r\n//         <EndMessage\r\n//           currentQuizId={currentQuizId}\r\n//           setQuizStates={setQuizStates}\r\n//           onNewGame={() => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage)}\r\n//           onMainMenu={handleMainMenu}\r\n//         />\r\n//       )}\r\n\r\n//       <MenuModal\r\n//         showSettings={() => setIsSettingsVisible(true)}\r\n//         showMainMenu={handleMainMenu}\r\n//         onNewGame={() => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage)}\r\n//         isVisible={isMenuVisible}\r\n//         closeMenuModal={() => setIsMenuVisible(false)}\r\n//       />\r\n\r\n//       {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default QuizPage;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}