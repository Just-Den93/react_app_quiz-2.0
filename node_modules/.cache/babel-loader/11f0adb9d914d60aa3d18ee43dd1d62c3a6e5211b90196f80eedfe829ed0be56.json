{"ast":null,"code":"// src/utils/quizPageUtils.js\n\n// Подсчет общего количества блоков\nexport const getTotalBlocks = data => {\n  const totalBlocks = (data === null || data === void 0 ? void 0 : data.reduce((acc, category) => {\n    var _category$blocks;\n    return acc + (((_category$blocks = category.blocks) === null || _category$blocks === void 0 ? void 0 : _category$blocks.length) || 0);\n  }, 0)) || 0;\n  console.log('Total blocks:', totalBlocks); // Логируем общее количество блоков\n  return totalBlocks;\n};\n\n// Подсчет количества использованных блоков\nexport const getUsedBlocksCount = currentQuizState => {\n  const usedBlocksCount = Object.values(currentQuizState.usedBlocks || {}).reduce((acc, categoryBlocks) => acc + categoryBlocks.length, 0);\n  console.log('Used blocks count:', usedBlocksCount); // Логируем количество использованных блоков\n  return usedBlocksCount;\n};\n\n// Обработка выбора блока\nexport const handleBlockSelect = (block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\n  var _currentQuizState$use, _currentQuizState$use2;\n  setSelectedBlock(block);\n  setSelectedCategory(category);\n  if ((_currentQuizState$use = currentQuizState.usedBlocks) !== null && _currentQuizState$use !== void 0 && (_currentQuizState$use2 = _currentQuizState$use[category.id]) !== null && _currentQuizState$use2 !== void 0 && _currentQuizState$use2.includes(block.id)) {\n    console.log(`Block ${block.id} is already used.`); // Логируем использованный блок\n    setIsBlockUsed(true); // Блок уже использован\n  } else {\n    console.log(`Block ${block.id} is available for use.`); // Логируем доступный блок\n    setIsBlockUsed(false); // Блок не использован\n  }\n};\n\n// Обработка закрытия модального окна\nexport const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\n  console.log('Closing modal'); // Логируем закрытие модального окна\n  setSelectedBlock(null);\n  setSelectedCategory(null);\n  setIsBlockUsed(false); // Сброс состояния\n};\n\n// Обработка завершения игры\nexport const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\n  console.log('Starting new game for quiz:', currentQuizId); // Логируем начало новой игры\n  localStorage.removeItem(`data-${currentQuizId}`);\n  localStorage.removeItem(`usedBlocks-${currentQuizId}`);\n  localStorage.removeItem('quizStates');\n  setQuizStates(prevStates => {\n    var _prevStates$currentQu;\n    return {\n      ...prevStates,\n      [currentQuizId]: {\n        usedBlocks: {},\n        data: null,\n        completedGames: (((_prevStates$currentQu = prevStates[currentQuizId]) === null || _prevStates$currentQu === void 0 ? void 0 : _prevStates$currentQu.completedGames) || 0) + 1 // Увеличиваем счетчик завершенных игр\n      }\n    };\n  });\n  console.log('New game started, reset states and incremented completed games count.');\n  setConfettiRunning(false);\n  setShowEndMessage(false);\n};\n\n// Обработка возврата в главное меню\nexport const handleMainMenu = (currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false) => {\n  console.log('Returning to main menu, clearing state:', clearState); // Логируем возврат в главное меню\n  if (clearState) {\n    localStorage.removeItem(`data-${currentQuizId}`);\n    setQuizStates(prevStates => ({\n      ...prevStates,\n      [currentQuizId]: {\n        usedBlocks: {},\n        data: null\n      }\n    }));\n    console.log(`State cleared for quiz ${currentQuizId}`);\n  }\n  setShowQuizPage(false);\n  setConfettiRunning(false);\n};\n\n// Обработка выбора категории и запуска конфетти\nexport const handleSelectCategory = (categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal) => {\n  console.log(`Selecting category ${categoryId}, block ${blockId} for quiz ${currentQuizId}`);\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\n  if (usedBlocksCount + 1 === totalBlocks) {\n    console.log('All blocks used, starting confetti and showing end message.'); // Логируем завершение всех блоков\n    setConfettiRunning(true);\n    setShowEndMessage(true);\n  }\n  handleCloseModal();\n};","map":{"version":3,"names":["getTotalBlocks","data","totalBlocks","reduce","acc","category","_category$blocks","blocks","length","console","log","getUsedBlocksCount","currentQuizState","usedBlocksCount","Object","values","usedBlocks","categoryBlocks","handleBlockSelect","block","setSelectedBlock","setSelectedCategory","setIsBlockUsed","_currentQuizState$use","_currentQuizState$use2","id","includes","handleCloseModal","handleNewGame","currentQuizId","setQuizStates","setConfettiRunning","setShowEndMessage","localStorage","removeItem","prevStates","_prevStates$currentQu","completedGames","handleMainMenu","setShowQuizPage","clearState","handleSelectCategory","categoryId","blockId","markBlockAsUsed"],"sources":["E:/quiz-app-react/src/components/QuizPage/quizPageUtils.js"],"sourcesContent":["// src/utils/quizPageUtils.js\r\n\r\n// Подсчет общего количества блоков\r\nexport const getTotalBlocks = (data) => {\r\n  const totalBlocks = data?.reduce((acc, category) => acc + (category.blocks?.length || 0), 0) || 0;\r\n  console.log('Total blocks:', totalBlocks); // Логируем общее количество блоков\r\n  return totalBlocks;\r\n};\r\n\r\n// Подсчет количества использованных блоков\r\nexport const getUsedBlocksCount = (currentQuizState) => {\r\n  const usedBlocksCount = Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n    (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n    0\r\n  );\r\n  console.log('Used blocks count:', usedBlocksCount); // Логируем количество использованных блоков\r\n  return usedBlocksCount;\r\n};\r\n\r\n// Обработка выбора блока\r\nexport const handleBlockSelect = (\r\n  block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed\r\n) => {\r\n  setSelectedBlock(block);\r\n  setSelectedCategory(category);\r\n\r\n  if (currentQuizState.usedBlocks?.[category.id]?.includes(block.id)) {\r\n    console.log(`Block ${block.id} is already used.`); // Логируем использованный блок\r\n    setIsBlockUsed(true); // Блок уже использован\r\n  } else {\r\n    console.log(`Block ${block.id} is available for use.`); // Логируем доступный блок\r\n    setIsBlockUsed(false); // Блок не использован\r\n  }\r\n};\r\n\r\n// Обработка закрытия модального окна\r\nexport const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\r\n  console.log('Closing modal'); // Логируем закрытие модального окна\r\n  setSelectedBlock(null);\r\n  setSelectedCategory(null);\r\n  setIsBlockUsed(false); // Сброс состояния\r\n};\r\n\r\n// Обработка завершения игры\r\nexport const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\r\n  console.log('Starting new game for quiz:', currentQuizId); // Логируем начало новой игры\r\n  localStorage.removeItem(`data-${currentQuizId}`);\r\n  localStorage.removeItem(`usedBlocks-${currentQuizId}`);\r\n  localStorage.removeItem('quizStates');\r\n\r\n  setQuizStates((prevStates) => ({\r\n    ...prevStates,\r\n    [currentQuizId]: {\r\n      usedBlocks: {},\r\n      data: null,\r\n      completedGames: (prevStates[currentQuizId]?.completedGames || 0) + 1, // Увеличиваем счетчик завершенных игр\r\n    },\r\n  }));\r\n\r\n  console.log('New game started, reset states and incremented completed games count.');\r\n\r\n  setConfettiRunning(false);\r\n  setShowEndMessage(false);\r\n};\r\n\r\n// Обработка возврата в главное меню\r\nexport const handleMainMenu = (\r\n  currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false\r\n) => {\r\n  console.log('Returning to main menu, clearing state:', clearState); // Логируем возврат в главное меню\r\n  if (clearState) {\r\n    localStorage.removeItem(`data-${currentQuizId}`);\r\n    setQuizStates((prevStates) => ({\r\n      ...prevStates,\r\n      [currentQuizId]: {\r\n        usedBlocks: {},\r\n        data: null,\r\n      },\r\n    }));\r\n    console.log(`State cleared for quiz ${currentQuizId}`);\r\n  }\r\n  setShowQuizPage(false);\r\n  setConfettiRunning(false);\r\n};\r\n\r\n// Обработка выбора категории и запуска конфетти\r\nexport const handleSelectCategory = (\r\n  categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal\r\n) => {\r\n  console.log(`Selecting category ${categoryId}, block ${blockId} for quiz ${currentQuizId}`);\r\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n  if (usedBlocksCount + 1 === totalBlocks) {\r\n    console.log('All blocks used, starting confetti and showing end message.'); // Логируем завершение всех блоков\r\n    setConfettiRunning(true);\r\n    setShowEndMessage(true);\r\n  }\r\n\r\n  handleCloseModal();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}