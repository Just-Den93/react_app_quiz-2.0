{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\context\\\\QuizContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Создаем контекст\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizContext = /*#__PURE__*/createContext();\n\n// Хук для доступа к контексту\nexport function useQuizContext() {\n  _s();\n  return useContext(QuizContext);\n}\n\n// Провайдер контекста\n_s(useQuizContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function QuizProvider({\n  children\n}) {\n  _s2();\n  const [showQuizPage, setShowQuizPage] = useState(() => {\n    const savedState = localStorage.getItem('showQuizPage');\n    return savedState === 'true';\n  });\n  const [selectedMode, setSelectedMode] = useState(() => {\n    const mode = localStorage.getItem('selectedMode');\n    return mode || null;\n  });\n  const [currentQuizId, setCurrentQuizId] = useState(() => {\n    return localStorage.getItem('currentQuizId') || null;\n  });\n  const [quizStates, setQuizStates] = useState(() => {\n    const savedStates = localStorage.getItem('quizStates');\n    return savedStates ? JSON.parse(savedStates) : {};\n  });\n  const [data, setData] = useState(() => {\n    const savedData = localStorage.getItem('data');\n    return savedData ? JSON.parse(savedData) : null;\n  });\n\n  // useEffect для синхронизации состояния с localStorage\n  useEffect(() => {\n    localStorage.setItem('showQuizPage', showQuizPage);\n  }, [showQuizPage]);\n  useEffect(() => {\n    if (selectedMode !== null) {\n      localStorage.setItem('selectedMode', selectedMode);\n    }\n  }, [selectedMode]);\n  useEffect(() => {\n    if (currentQuizId !== null) {\n      localStorage.setItem('currentQuizId', currentQuizId);\n    }\n  }, [currentQuizId]);\n  useEffect(() => {\n    if (quizStates) {\n      localStorage.setItem('quizStates', JSON.stringify(quizStates));\n    }\n  }, [quizStates]);\n  useEffect(() => {\n    if (data) {\n      localStorage.setItem('data', JSON.stringify(data));\n    }\n  }, [data]);\n\n  // useEffect для загрузки данных, если они еще не загружены\n  useEffect(() => {\n    if (selectedMode && currentQuizId && !data) {\n      const selectedData = loadJsonDataByMode(selectedMode); // Предполагается, что эта функция доступна\n      if (selectedData) {\n        setData(selectedData.categories);\n        updateQuizState(currentQuizId, {\n          data: selectedData.categories\n        });\n        localStorage.setItem('data', JSON.stringify(selectedData.categories));\n      }\n    }\n  }, [selectedMode, currentQuizId, data]);\n  const updateQuizState = (uuid, newState) => {\n    setQuizStates(prevStates => {\n      const updatedStates = {\n        ...prevStates,\n        [uuid]: {\n          ...prevStates[uuid],\n          ...newState\n        }\n      };\n      localStorage.setItem('quizStates', JSON.stringify(updatedStates));\n      return updatedStates;\n    });\n  };\n  const markBlockAsUsed = (quizId, categoryId, blockId) => {\n    if (!categoryId) {\n      console.error('categoryId не определен, невозможно отметить блок как используемый');\n      return;\n    }\n    setQuizStates(prevStates => {\n      const previousState = prevStates[quizId] || {};\n      const updatedUsedBlocks = {\n        ...previousState.usedBlocks\n      };\n      if (!updatedUsedBlocks[categoryId]) {\n        updatedUsedBlocks[categoryId] = [];\n      }\n      if (!updatedUsedBlocks[categoryId].includes(blockId)) {\n        updatedUsedBlocks[categoryId].push(blockId);\n      }\n      const updatedStates = {\n        ...prevStates,\n        [quizId]: {\n          ...previousState,\n          usedBlocks: updatedUsedBlocks\n        }\n      };\n      localStorage.setItem('quizStates', JSON.stringify(updatedStates));\n      localStorage.setItem(`usedBlocks-${quizId}`, JSON.stringify(updatedUsedBlocks));\n      return updatedStates;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(QuizContext.Provider, {\n    value: {\n      showQuizPage,\n      setShowQuizPage,\n      selectedMode,\n      setSelectedMode,\n      currentQuizId,\n      setCurrentQuizId,\n      quizStates,\n      updateQuizState,\n      markBlockAsUsed,\n      data\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s2(QuizProvider, \"nkqh4v/rT/D4rOOCZjoWJW/XQsQ=\");\n_c = QuizProvider;\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","QuizContext","useQuizContext","_s","QuizProvider","children","_s2","showQuizPage","setShowQuizPage","savedState","localStorage","getItem","selectedMode","setSelectedMode","mode","currentQuizId","setCurrentQuizId","quizStates","setQuizStates","savedStates","JSON","parse","data","setData","savedData","setItem","stringify","selectedData","loadJsonDataByMode","categories","updateQuizState","uuid","newState","prevStates","updatedStates","markBlockAsUsed","quizId","categoryId","blockId","console","error","previousState","updatedUsedBlocks","usedBlocks","includes","push","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/context/QuizContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Создаем контекст\r\nconst QuizContext = createContext();\r\n\r\n// Хук для доступа к контексту\r\nexport function useQuizContext() {\r\n  return useContext(QuizContext);\r\n}\r\n\r\n// Провайдер контекста\r\nexport function QuizProvider({ children }) {\r\n  const [showQuizPage, setShowQuizPage] = useState(() => {\r\n    const savedState = localStorage.getItem('showQuizPage');\r\n    return savedState === 'true';\r\n  });\r\n\r\n  const [selectedMode, setSelectedMode] = useState(() => {\r\n    const mode = localStorage.getItem('selectedMode');\r\n    return mode || null;\r\n  });\r\n\r\n  const [currentQuizId, setCurrentQuizId] = useState(() => {\r\n    return localStorage.getItem('currentQuizId') || null;\r\n  });\r\n\r\n  const [quizStates, setQuizStates] = useState(() => {\r\n    const savedStates = localStorage.getItem('quizStates');\r\n    return savedStates ? JSON.parse(savedStates) : {};\r\n  });\r\n\r\n  const [data, setData] = useState(() => {\r\n    const savedData = localStorage.getItem('data');\r\n    return savedData ? JSON.parse(savedData) : null;\r\n  });\r\n\r\n  // useEffect для синхронизации состояния с localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('showQuizPage', showQuizPage);\r\n  }, [showQuizPage]);\r\n\r\n  useEffect(() => {\r\n    if (selectedMode !== null) {\r\n      localStorage.setItem('selectedMode', selectedMode);\r\n    }\r\n  }, [selectedMode]);\r\n\r\n  useEffect(() => {\r\n    if (currentQuizId !== null) {\r\n      localStorage.setItem('currentQuizId', currentQuizId);\r\n    }\r\n  }, [currentQuizId]);\r\n\r\n  useEffect(() => {\r\n    if (quizStates) {\r\n      localStorage.setItem('quizStates', JSON.stringify(quizStates));\r\n    }\r\n  }, [quizStates]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      localStorage.setItem('data', JSON.stringify(data));\r\n    }\r\n  }, [data]);\r\n\r\n  // useEffect для загрузки данных, если они еще не загружены\r\n  useEffect(() => {\r\n    if (selectedMode && currentQuizId && !data) {\r\n      const selectedData = loadJsonDataByMode(selectedMode);  // Предполагается, что эта функция доступна\r\n      if (selectedData) {\r\n        setData(selectedData.categories);\r\n        updateQuizState(currentQuizId, { data: selectedData.categories });\r\n        localStorage.setItem('data', JSON.stringify(selectedData.categories));\r\n      }\r\n    }\r\n  }, [selectedMode, currentQuizId, data]);\r\n\r\n  const updateQuizState = (uuid, newState) => {\r\n    setQuizStates(prevStates => {\r\n      const updatedStates = {\r\n        ...prevStates,\r\n        [uuid]: {\r\n          ...prevStates[uuid],\r\n          ...newState,\r\n        },\r\n      };\r\n      localStorage.setItem('quizStates', JSON.stringify(updatedStates));\r\n      return updatedStates;\r\n    });\r\n  };\r\n\r\n  const markBlockAsUsed = (quizId, categoryId, blockId) => {\r\n    if (!categoryId) {\r\n      console.error('categoryId не определен, невозможно отметить блок как используемый');\r\n      return;\r\n    }\r\n\r\n    setQuizStates(prevStates => {\r\n      const previousState = prevStates[quizId] || {};\r\n      const updatedUsedBlocks = { ...previousState.usedBlocks };\r\n\r\n      if (!updatedUsedBlocks[categoryId]) {\r\n        updatedUsedBlocks[categoryId] = [];\r\n      }\r\n\r\n      if (!updatedUsedBlocks[categoryId].includes(blockId)) {\r\n        updatedUsedBlocks[categoryId].push(blockId);\r\n      }\r\n\r\n      const updatedStates = {\r\n        ...prevStates,\r\n        [quizId]: {\r\n          ...previousState,\r\n          usedBlocks: updatedUsedBlocks,\r\n        },\r\n      };\r\n\r\n      localStorage.setItem('quizStates', JSON.stringify(updatedStates));\r\n      localStorage.setItem(`usedBlocks-${quizId}`, JSON.stringify(updatedUsedBlocks));\r\n\r\n      return updatedStates;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <QuizContext.Provider value={{\r\n      showQuizPage,\r\n      setShowQuizPage,\r\n      selectedMode,\r\n      setSelectedMode,\r\n      currentQuizId,\r\n      setCurrentQuizId,\r\n      quizStates,\r\n      updateQuizState,\r\n      markBlockAsUsed,\r\n      data,\r\n    }}>\r\n      {children}\r\n    </QuizContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}