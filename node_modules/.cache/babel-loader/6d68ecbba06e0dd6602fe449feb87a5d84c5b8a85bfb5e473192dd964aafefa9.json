{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\app-quiz-react-project\\\\quiz-app\\\\src\\\\components\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport ContentContainer from './ContentContainer';\nimport EndMessage from './EndMessage';\nimport MenuModal from './MenuModal';\nimport Settings from './Settings';\nimport styles from '../styles/QuizPage.module.css';\nimport { useQuizContext } from '../context/QuizContext';\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizPage({\n  quizId\n}) {\n  _s();\n  const {\n    quizStates,\n    updateQuizState,\n    markBlockAsUsed,\n    setShowQuizPage\n  } = useQuizContext();\n  const currentQuizState = quizStates[quizId] || {};\n  const [data, setData] = useState(currentQuizState.data || null);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  useEffect(() => {\n    console.log('Current Quiz ID:', quizId);\n    console.log('Current Quiz State:', currentQuizState);\n    if (!data && quizId) {\n      const selectedMode = currentQuizState.mode; // Определяем режим из состояния викторины\n      if (selectedMode) {\n        console.log('Loading data for mode:', selectedMode);\n        const selectedData = loadJsonDataByMode(selectedMode);\n        if (selectedData) {\n          setData(selectedData.categories);\n          updateQuizState(quizId, {\n            data: selectedData.categories\n          });\n        } else {\n          console.log('No data found for mode:', selectedMode);\n        }\n      }\n    }\n  }, [data, quizId, currentQuizState, updateQuizState]);\n  const handleBlockUse = (categoryName, blockId) => {\n    markBlockAsUsed(quizId, categoryName, blockId);\n  };\n  const showSettings = () => {\n    setIsSettingsVisible(true);\n  };\n  const hideSettings = () => {\n    setIsSettingsVisible(false);\n  };\n\n  // Этот useEffect добавлен для проверки состояния контекста\n  useEffect(() => {\n    console.log('showQuizPage:', showQuizPage);\n    console.log('selectedMode:', selectedMode);\n    console.log('currentQuizId:', currentQuizId);\n    if (showQuizPage && selectedMode && currentQuizId) {\n      console.log('All states are set, QuizPage should render.');\n    }\n  }, [showQuizPage, selectedMode, currentQuizId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(ContentContainer, {\n      usedBlocks: currentQuizState.usedBlocks || {},\n      markBlockAsUsed: handleBlockUse,\n      data: data\n      // mode пропс больше не передается\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: showSettings,\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: hideSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"1EB98nnyfe5OqiSNV5JYYQKzDHI=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","Header","ContentContainer","EndMessage","MenuModal","Settings","styles","useQuizContext","loadJsonDataByMode","jsxDEV","_jsxDEV","QuizPage","quizId","_s","quizStates","updateQuizState","markBlockAsUsed","setShowQuizPage","currentQuizState","data","setData","isSettingsVisible","setIsSettingsVisible","console","log","selectedMode","mode","selectedData","categories","handleBlockUse","categoryName","blockId","showSettings","hideSettings","showQuizPage","currentQuizId","className","quiz_page","children","fileName","_jsxFileName","lineNumber","columnNumber","usedBlocks","showMainMenu","onClose","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/app-quiz-react-project/quiz-app/src/components/QuizPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport ContentContainer from './ContentContainer';\r\nimport EndMessage from './EndMessage';\r\nimport MenuModal from './MenuModal';\r\nimport Settings from './Settings';\r\nimport styles from '../styles/QuizPage.module.css';\r\nimport { useQuizContext } from '../context/QuizContext';\r\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\r\n\r\nfunction QuizPage({ quizId }) {\r\n  const { quizStates, updateQuizState, markBlockAsUsed, setShowQuizPage } = useQuizContext();\r\n  const currentQuizState = quizStates[quizId] || {};\r\n  const [data, setData] = useState(currentQuizState.data || null);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log('Current Quiz ID:', quizId);\r\n    console.log('Current Quiz State:', currentQuizState);\r\n\r\n    if (!data && quizId) {\r\n      const selectedMode = currentQuizState.mode; // Определяем режим из состояния викторины\r\n      if (selectedMode) {\r\n        console.log('Loading data for mode:', selectedMode);\r\n        const selectedData = loadJsonDataByMode(selectedMode);\r\n        if (selectedData) {\r\n          setData(selectedData.categories);\r\n          updateQuizState(quizId, { data: selectedData.categories });\r\n        } else {\r\n          console.log('No data found for mode:', selectedMode);\r\n        }\r\n      }\r\n    }\r\n  }, [data, quizId, currentQuizState, updateQuizState]);\r\n\r\n  const handleBlockUse = (categoryName, blockId) => {\r\n    markBlockAsUsed(quizId, categoryName, blockId);\r\n  };\r\n\r\n  const showSettings = () => {\r\n    setIsSettingsVisible(true);\r\n  };\r\n\r\n  const hideSettings = () => {\r\n    setIsSettingsVisible(false);\r\n  };\r\n\r\n    // Этот useEffect добавлен для проверки состояния контекста\r\n\t useEffect(() => {\r\n\t\tconsole.log('showQuizPage:', showQuizPage);\r\n\t\tconsole.log('selectedMode:', selectedMode);\r\n\t\tconsole.log('currentQuizId:', currentQuizId);\r\n\t\tif (showQuizPage && selectedMode && currentQuizId) {\r\n\t\t  console.log('All states are set, QuizPage should render.');\r\n\t\t}\r\n\t }, [showQuizPage, selectedMode, currentQuizId]);\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <Header />\r\n      {data ? (\r\n        <ContentContainer\r\n          usedBlocks={currentQuizState.usedBlocks || {}}\r\n          markBlockAsUsed={handleBlockUse}\r\n          data={data}\r\n          // mode пропс больше не передается\r\n        />\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n      <EndMessage />\r\n      <MenuModal showSettings={showSettings} showMainMenu={() => setShowQuizPage(false)} />\r\n      {isSettingsVisible && <Settings onClose={hideSettings} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}