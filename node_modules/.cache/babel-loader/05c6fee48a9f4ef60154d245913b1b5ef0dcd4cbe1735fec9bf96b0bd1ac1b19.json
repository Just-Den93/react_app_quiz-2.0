{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\QuizPage\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState } from 'react';\nimport ContentContainer from '../ContentContainer/ContentContainer';\nimport EndMessage from '../EndMessage/EndMessage';\nimport MenuModal from '../MenuModal/MenuModal';\nimport Modal from '../Modal/Modal';\nimport Settings from '../Settings/Settings';\nimport ConfettiAnimation from '../Animation/ConfettiAnimation';\nimport styles from './QuizPage.module.css';\nimport { useQuizContext } from '../../context/QuizContext';\nimport PCImage from '../../images/PC_horizontal_1line_black.svg';\nimport { getTotalBlocks, getUsedBlocksCount, handleBlockSelect, handleCloseModal, handleNewGame, handleMainMenu as quizPageHandleMainMenu, handleSelectCategory } from './quizPageUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    quizStates,\n    setShowQuizPage,\n    currentQuizId,\n    selectedMode,\n    data,\n    markBlockAsUsed,\n    setQuizStates\n  } = useQuizContext();\n\n  // Защитная проверка для currentQuizId и quizStates\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [confettiRunning, setConfettiRunning] = useState(false);\n  const [showEndMessage, setShowEndMessage] = useState(false);\n  const [isMenuVisible, setIsMenuVisible] = useState(false);\n  const [isBlockUsed, setIsBlockUsed] = useState(false);\n  const totalBlocks = useMemo(() => getTotalBlocks(data), [data]);\n  const usedBlocksCount = useMemo(() => getUsedBlocksCount(currentQuizState), [currentQuizState]);\n\n  // Функция для возврата в главное меню\n  const handleMainMenu = () => {\n    console.log('QuizPage: handleMainMenu called');\n    setShowQuizPage(false); // Возврат на главную страницу\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(ConfettiAnimation, {\n      isRunning: confettiRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: PCImage,\n        alt: \"PC horizontal line\",\n        className: styles.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n        data: data,\n        onBlockSelect: (block, category) => handleBlockSelect(block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed),\n        usedBlocks: currentQuizState.usedBlocks || {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), selectedBlock && /*#__PURE__*/_jsxDEV(Modal, {\n        block: selectedBlock,\n        categoryName: (selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.name) || 'Без категории',\n        onClose: () => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed),\n        selectedMode: selectedMode,\n        onSelectCategory: (categoryId, blockId) => handleSelectCategory(categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, () => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)),\n        isBlockUsed: isBlockUsed,\n        onTryAgain: () => setIsBlockUsed(false),\n        onContinue: () => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), showEndMessage && /*#__PURE__*/_jsxDEV(EndMessage, {\n      currentQuizId: currentQuizId,\n      setQuizStates: setQuizStates,\n      onNewGame: () => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage),\n      onMainMenu: handleMainMenu // Корректная передача функции\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => setIsSettingsVisible(true),\n      showMainMenu: handleMainMenu // Здесь также корректная передача функции\n      ,\n      onNewGame: () => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage),\n      isVisible: isMenuVisible,\n      closeMenuModal: () => setIsMenuVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => setIsSettingsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"bY6feRA4ymPBefGZjfNc9gVP4ww=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useMemo","useState","ContentContainer","EndMessage","MenuModal","Modal","Settings","ConfettiAnimation","styles","useQuizContext","PCImage","getTotalBlocks","getUsedBlocksCount","handleBlockSelect","handleCloseModal","handleNewGame","handleMainMenu","quizPageHandleMainMenu","handleSelectCategory","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","_s","quizStates","setShowQuizPage","currentQuizId","selectedMode","data","markBlockAsUsed","setQuizStates","currentQuizState","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","selectedCategory","setSelectedCategory","confettiRunning","setConfettiRunning","showEndMessage","setShowEndMessage","isMenuVisible","setIsMenuVisible","isBlockUsed","setIsBlockUsed","totalBlocks","usedBlocksCount","console","log","className","quiz_page","children","isRunning","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","image","onBlockSelect","block","category","usedBlocks","categoryName","name","onClose","onSelectCategory","categoryId","blockId","onTryAgain","onContinue","onNewGame","onMainMenu","showSettings","showMainMenu","isVisible","closeMenuModal","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/QuizPage/QuizPage.jsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\nimport EndMessage from '../EndMessage/EndMessage';\r\nimport MenuModal from '../MenuModal/MenuModal';\r\nimport Modal from '../Modal/Modal';\r\nimport Settings from '../Settings/Settings';\r\nimport ConfettiAnimation from '../Animation/ConfettiAnimation';\r\nimport styles from './QuizPage.module.css';\r\nimport { useQuizContext } from '../../context/QuizContext';\r\nimport PCImage from '../../images/PC_horizontal_1line_black.svg';\r\nimport {\r\n  getTotalBlocks,\r\n  getUsedBlocksCount,\r\n  handleBlockSelect,\r\n  handleCloseModal,\r\n  handleNewGame,\r\n  handleMainMenu as quizPageHandleMainMenu,\r\n  handleSelectCategory,\r\n} from './quizPageUtils';\r\n\r\nfunction QuizPage() {\r\n  const { quizStates, setShowQuizPage, currentQuizId, selectedMode, data, markBlockAsUsed, setQuizStates } = useQuizContext();\r\n\r\n  // Защитная проверка для currentQuizId и quizStates\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [confettiRunning, setConfettiRunning] = useState(false);\r\n  const [showEndMessage, setShowEndMessage] = useState(false);\r\n  const [isMenuVisible, setIsMenuVisible] = useState(false);\r\n  const [isBlockUsed, setIsBlockUsed] = useState(false);\r\n\r\n  const totalBlocks = useMemo(() => getTotalBlocks(data), [data]);\r\n  const usedBlocksCount = useMemo(() => getUsedBlocksCount(currentQuizState), [currentQuizState]);\r\n\r\n  // Функция для возврата в главное меню\r\n  const handleMainMenu = () => {\r\n    console.log('QuizPage: handleMainMenu called');\r\n    setShowQuizPage(false);  // Возврат на главную страницу\r\n  };\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <ConfettiAnimation isRunning={confettiRunning} />\r\n      {data ? (\r\n        <>\r\n          <img src={PCImage} alt=\"PC horizontal line\" className={styles.image} />\r\n          <ContentContainer\r\n            data={data}\r\n            onBlockSelect={(block, category) =>\r\n              handleBlockSelect(\r\n                block,\r\n                category,\r\n                currentQuizState,\r\n                setSelectedBlock,\r\n                setSelectedCategory,\r\n                setIsBlockUsed\r\n              )\r\n            }\r\n            usedBlocks={currentQuizState.usedBlocks || {}}\r\n          />\r\n\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              categoryName={selectedCategory?.name || 'Без категории'}\r\n              onClose={() => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)}\r\n              selectedMode={selectedMode}\r\n              onSelectCategory={(categoryId, blockId) =>\r\n                handleSelectCategory(\r\n                  categoryId,\r\n                  blockId,\r\n                  currentQuizId,\r\n                  markBlockAsUsed,\r\n                  totalBlocks,\r\n                  usedBlocksCount,\r\n                  setConfettiRunning,\r\n                  setShowEndMessage,\r\n                  () => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)\r\n                )\r\n              }\r\n              isBlockUsed={isBlockUsed}\r\n              onTryAgain={() => setIsBlockUsed(false)}\r\n              onContinue={() => handleCloseModal(setSelectedBlock, setSelectedCategory, setIsBlockUsed)}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n\r\n      {showEndMessage && (\r\n        <EndMessage\r\n          currentQuizId={currentQuizId}\r\n          setQuizStates={setQuizStates}\r\n          onNewGame={() => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage)}\r\n          onMainMenu={handleMainMenu}  // Корректная передача функции\r\n        />\r\n      )}\r\n\r\n      <MenuModal\r\n        showSettings={() => setIsSettingsVisible(true)}\r\n        showMainMenu={handleMainMenu}  // Здесь также корректная передача функции\r\n        onNewGame={() => handleNewGame(currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage)}\r\n        isVisible={isMenuVisible}\r\n        closeMenuModal={() => setIsMenuVisible(false)}\r\n      />\r\n\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}