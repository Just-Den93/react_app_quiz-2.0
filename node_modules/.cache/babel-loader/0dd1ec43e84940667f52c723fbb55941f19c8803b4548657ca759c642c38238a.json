{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\context\\\\QuizContext.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function QuizProvider({\n  children\n}) {\n  _s();\n  const [showQuizPage, setShowQuizPage] = useState(() => {\n    const savedState = localStorage.getItem('showQuizPage');\n    return savedState === 'true';\n  });\n  const [selectedMode, setSelectedMode] = useState(null);\n  const [currentQuizId, setCurrentQuizId] = useState(null);\n  const [quizStates, setQuizStates] = useState({});\n  const updateQuizState = (uuid, newState) => {\n    console.log(`Setting quizId to: ${uuid}`);\n    setQuizStates(prevStates => ({\n      ...prevStates,\n      [uuid]: {\n        ...prevStates[uuid],\n        ...newState\n      }\n    }));\n  };\n\n  // Функция для пометки блока как использованного\n  const markBlockAsUsed = (quizId, categoryId, blockId) => {\n    updateQuizState(quizId, prevState => {\n      const updatedCategories = prevState.data.map(category => {\n        if (category.id === categoryId) {\n          return {\n            ...category,\n            blocks: category.blocks.map(block => block.id === blockId ? {\n              ...block,\n              used: true\n            } : block)\n          };\n        }\n        return category;\n      });\n      return {\n        data: updatedCategories\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(QuizContext.Provider, {\n    value: {\n      showQuizPage,\n      setShowQuizPage,\n      selectedMode,\n      setSelectedMode,\n      currentQuizId,\n      setCurrentQuizId,\n      quizStates,\n      updateQuizState,\n      markBlockAsUsed // Добавляем функцию в контекст\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizProvider, \"g0eZwtgt1H+M9hwDOAoW0jbP1Ow=\");\n_c = QuizProvider;\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["QuizProvider","children","_s","showQuizPage","setShowQuizPage","useState","savedState","localStorage","getItem","selectedMode","setSelectedMode","currentQuizId","setCurrentQuizId","quizStates","setQuizStates","updateQuizState","uuid","newState","console","log","prevStates","markBlockAsUsed","quizId","categoryId","blockId","prevState","updatedCategories","data","map","category","id","blocks","block","used","_jsxDEV","QuizContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/context/QuizContext.js"],"sourcesContent":["export function QuizProvider({ children }) {\r\n  const [showQuizPage, setShowQuizPage] = useState(() => {\r\n    const savedState = localStorage.getItem('showQuizPage');\r\n    return savedState === 'true';\r\n  });\r\n  const [selectedMode, setSelectedMode] = useState(null);\r\n  const [currentQuizId, setCurrentQuizId] = useState(null);\r\n  const [quizStates, setQuizStates] = useState({});\r\n\r\n  const updateQuizState = (uuid, newState) => {\r\n    console.log(`Setting quizId to: ${uuid}`);\r\n    setQuizStates(prevStates => ({\r\n      ...prevStates,\r\n      [uuid]: {\r\n        ...prevStates[uuid],\r\n        ...newState,\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Функция для пометки блока как использованного\r\n  const markBlockAsUsed = (quizId, categoryId, blockId) => {\r\n    updateQuizState(quizId, prevState => {\r\n      const updatedCategories = prevState.data.map(category => {\r\n        if (category.id === categoryId) {\r\n          return {\r\n            ...category,\r\n            blocks: category.blocks.map(block =>\r\n              block.id === blockId ? { ...block, used: true } : block\r\n            ),\r\n          };\r\n        }\r\n        return category;\r\n      });\r\n      return { data: updatedCategories };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <QuizContext.Provider value={{\r\n      showQuizPage,\r\n      setShowQuizPage,\r\n      selectedMode,\r\n      setSelectedMode,\r\n      currentQuizId,\r\n      setCurrentQuizId,\r\n      quizStates,\r\n      updateQuizState,\r\n      markBlockAsUsed, // Добавляем функцию в контекст\r\n    }}>\r\n      {children}\r\n    </QuizContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,OAAO,SAASA,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGC,QAAQ,CAAC,MAAM;IACrD,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,OAAOF,UAAU,KAAK,MAAM;EAC9B,CAAC,CAAC;EACF,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEhD,MAAMU,eAAe,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;IAC1CC,OAAO,CAACC,GAAG,CAAC,sBAAsBH,IAAI,EAAE,CAAC;IACzCF,aAAa,CAACM,UAAU,KAAK;MAC3B,GAAGA,UAAU;MACb,CAACJ,IAAI,GAAG;QACN,GAAGI,UAAU,CAACJ,IAAI,CAAC;QACnB,GAAGC;MACL;IACF,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMI,eAAe,GAAGA,CAACC,MAAM,EAAEC,UAAU,EAAEC,OAAO,KAAK;IACvDT,eAAe,CAACO,MAAM,EAAEG,SAAS,IAAI;MACnC,MAAMC,iBAAiB,GAAGD,SAAS,CAACE,IAAI,CAACC,GAAG,CAACC,QAAQ,IAAI;QACvD,IAAIA,QAAQ,CAACC,EAAE,KAAKP,UAAU,EAAE;UAC9B,OAAO;YACL,GAAGM,QAAQ;YACXE,MAAM,EAAEF,QAAQ,CAACE,MAAM,CAACH,GAAG,CAACI,KAAK,IAC/BA,KAAK,CAACF,EAAE,KAAKN,OAAO,GAAG;cAAE,GAAGQ,KAAK;cAAEC,IAAI,EAAE;YAAK,CAAC,GAAGD,KACpD;UACF,CAAC;QACH;QACA,OAAOH,QAAQ;MACjB,CAAC,CAAC;MACF,OAAO;QAAEF,IAAI,EAAED;MAAkB,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC;EAED,oBACEQ,OAAA,CAACC,WAAW,CAACC,QAAQ;IAACC,KAAK,EAAE;MAC3BlC,YAAY;MACZC,eAAe;MACfK,YAAY;MACZC,eAAe;MACfC,aAAa;MACbC,gBAAgB;MAChBC,UAAU;MACVE,eAAe;MACfM,eAAe,CAAE;IACnB,CAAE;IAAApB,QAAA,EACCA;EAAQ;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACvC,EAAA,CArDeF,YAAY;AAAA0C,EAAA,GAAZ1C,YAAY;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}