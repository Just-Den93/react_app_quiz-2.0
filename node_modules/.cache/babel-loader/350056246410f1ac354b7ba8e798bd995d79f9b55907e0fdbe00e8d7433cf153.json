{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\QuizPage\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport Header from '../Header/Header';\nimport ContentContainer from '../ContentContainer/ContentContainer';\nimport EndMessage from '../EndMessage/EndMessage';\nimport MenuModal from '../MenuModal/MenuModal';\nimport Modal from '../Modal/Modal';\nimport Settings from '../Settings/Settings';\nimport styles from './QuizPage.module.css';\nimport { useQuizContext } from '../../context/QuizContext';\nimport { loadJsonDataByMode } from '../../utils/loadJsonData';\nimport { useModalLogic } from '../Modal/modalUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    quizStates,\n    updateQuizState,\n    setShowQuizPage,\n    selectedMode,\n    currentQuizId\n  } = useQuizContext();\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\n  const [data, setData] = useState(() => {\n    const storedData = localStorage.getItem(`data-${currentQuizId}`);\n    return storedData ? JSON.parse(storedData) : currentQuizState.data || null;\n  });\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  useEffect(() => {\n    if (!data && currentQuizId && selectedMode) {\n      const selectedData = loadJsonDataByMode(selectedMode);\n      if (selectedData) {\n        setData(selectedData.categories);\n        updateQuizState(currentQuizId, {\n          data: selectedData.categories\n        });\n        localStorage.setItem(`data-${currentQuizId}`, JSON.stringify(selectedData.categories));\n      }\n    }\n  }, [data, currentQuizId, selectedMode, currentQuizState, updateQuizState]);\n  const handleBlockSelect = block => {\n    setSelectedBlock(block);\n  };\n  const handleCloseModal = () => {\n    setSelectedBlock(null);\n  };\n  const modalLogic = useModalLogic(selectedBlock, handleCloseModal);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ContentContainer, {\n        data: data,\n        onBlockSelect: handleBlockSelect,\n        usedBlocks: currentQuizState.usedBlocks || {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), selectedBlock && /*#__PURE__*/_jsxDEV(Modal, {\n        block: selectedBlock,\n        onClose: handleCloseModal,\n        ...modalLogic,\n        selectedMode: selectedMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => setIsSettingsVisible(true),\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => setIsSettingsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"SX3GvHzpS4WPkRtxWRk6Fu+vqEc=\", false, function () {\n  return [useQuizContext, useModalLogic];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Header","ContentContainer","EndMessage","MenuModal","Modal","Settings","styles","useQuizContext","loadJsonDataByMode","useModalLogic","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","_s","quizStates","updateQuizState","setShowQuizPage","selectedMode","currentQuizId","currentQuizState","data","setData","storedData","localStorage","getItem","JSON","parse","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","selectedData","categories","setItem","stringify","handleBlockSelect","block","handleCloseModal","modalLogic","className","quiz_page","children","fileName","_jsxFileName","lineNumber","columnNumber","onBlockSelect","usedBlocks","onClose","showSettings","showMainMenu","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/QuizPage/QuizPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport Header from '../Header/Header';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\nimport EndMessage from '../EndMessage/EndMessage';\r\nimport MenuModal from '../MenuModal/MenuModal';\r\nimport Modal from '../Modal/Modal';\r\nimport Settings from '../Settings/Settings';\r\nimport styles from './QuizPage.module.css';\r\nimport { useQuizContext } from '../../context/QuizContext';\r\nimport { loadJsonDataByMode } from '../../utils/loadJsonData';\r\nimport { useModalLogic } from '../Modal/modalUtils';\r\n\r\nfunction QuizPage() {\r\n  const { quizStates, updateQuizState, setShowQuizPage, selectedMode, currentQuizId } = useQuizContext();\r\n\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [data, setData] = useState(() => {\r\n    const storedData = localStorage.getItem(`data-${currentQuizId}`);\r\n    return storedData ? JSON.parse(storedData) : currentQuizState.data || null;\r\n  });\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!data && currentQuizId && selectedMode) {\r\n      const selectedData = loadJsonDataByMode(selectedMode);\r\n      if (selectedData) {\r\n        setData(selectedData.categories);\r\n        updateQuizState(currentQuizId, { data: selectedData.categories });\r\n        localStorage.setItem(`data-${currentQuizId}`, JSON.stringify(selectedData.categories));\r\n      }\r\n    }\r\n  }, [data, currentQuizId, selectedMode, currentQuizState, updateQuizState]);\r\n\r\n  const handleBlockSelect = (block) => {\r\n    setSelectedBlock(block);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setSelectedBlock(null);\r\n  };\r\n\r\n  const modalLogic = useModalLogic(selectedBlock, handleCloseModal);\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <Header />\r\n      {data ? (\r\n        <>\r\n          <ContentContainer data={data} onBlockSelect={handleBlockSelect} usedBlocks={currentQuizState.usedBlocks || {}} />\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              onClose={handleCloseModal}\r\n              {...modalLogic}\r\n              selectedMode={selectedMode}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>Loading data...</div>\r\n      )}\r\n      <EndMessage />\r\n      <MenuModal showSettings={() => setIsSettingsVisible(true)} showMainMenu={() => setShowQuizPage(false)} />\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}