{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\context\\\\QuizContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\nimport { safeStorage, safeJsonParse, handleError } from '../utils/errorHandling';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizContext = /*#__PURE__*/createContext();\nexport function useQuizContext() {\n  _s();\n  return useContext(QuizContext);\n}\n_s(useQuizContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function QuizProvider({\n  children\n}) {\n  _s2();\n  // Ініціалізація стану з безпечним отриманням даних\n  const [showQuizPage, setShowQuizPage] = useState(() => {\n    return safeStorage.getItem('showQuizPage') === 'true';\n  });\n  const [selectedMode, setSelectedMode] = useState(() => {\n    return safeStorage.getItem('selectedMode', null);\n  });\n  const [currentQuizId, setCurrentQuizId] = useState(() => {\n    return safeStorage.getItem('currentQuizId', null);\n  });\n  const [quizStates, setQuizStates] = useState(() => {\n    const savedStates = safeStorage.getItem('quizStates');\n    return safeJsonParse(savedStates, {});\n  });\n  const [data, setData] = useState(() => {\n    const savedData = safeStorage.getItem('data');\n    return safeJsonParse(savedData, null);\n  });\n\n  // Безпечне оновлення localStorage при зміні стану\n  useEffect(() => {\n    safeStorage.setItem('showQuizPage', showQuizPage.toString());\n  }, [showQuizPage]);\n  useEffect(() => {\n    if (selectedMode !== null) {\n      safeStorage.setItem('selectedMode', selectedMode);\n    }\n  }, [selectedMode]);\n  useEffect(() => {\n    if (currentQuizId !== null) {\n      safeStorage.setItem('currentQuizId', currentQuizId);\n    }\n  }, [currentQuizId]);\n\n  // Безпечне завантаження даних вікторини\n  useEffect(() => {\n    if (selectedMode && currentQuizId) {\n      try {\n        const selectedData = loadJsonDataByMode(selectedMode);\n        if (selectedData !== null && selectedData !== void 0 && selectedData.categories) {\n          setData(selectedData.categories);\n          updateQuizState(currentQuizId, {\n            data: selectedData.categories\n          });\n          safeStorage.setItem('data', JSON.stringify(selectedData.categories));\n        }\n      } catch (error) {\n        handleError(error, 'Не вдалося завантажити дані вікторини.');\n      }\n    }\n  }, [selectedMode, currentQuizId]);\n\n  // Безпечне оновлення стану вікторини\n  const updateQuizState = (uuid, newState) => {\n    try {\n      setQuizStates(prevStates => {\n        const updatedStates = {\n          ...prevStates,\n          [uuid]: {\n            ...prevStates[uuid],\n            ...newState\n          }\n        };\n        safeStorage.setItem('quizStates', JSON.stringify(updatedStates));\n        return updatedStates;\n      });\n    } catch (error) {\n      handleError(error, 'Не вдалося оновити стан вікторини.');\n    }\n  };\n\n  // Безпечне позначення блоку як використаного\n  const markBlockAsUsed = (quizId, categoryId, blockId) => {\n    try {\n      if (!categoryId) {\n        throw new Error('Не вказано категорію.');\n      }\n      setQuizStates(prevStates => {\n        const previousState = prevStates[quizId] || {};\n        const updatedUsedBlocks = {\n          ...previousState.usedBlocks\n        };\n        if (!updatedUsedBlocks[categoryId]) {\n          updatedUsedBlocks[categoryId] = [];\n        }\n        if (!updatedUsedBlocks[categoryId].includes(blockId)) {\n          updatedUsedBlocks[categoryId].push(blockId);\n        }\n        const updatedStates = {\n          ...prevStates,\n          [quizId]: {\n            ...previousState,\n            usedBlocks: updatedUsedBlocks\n          }\n        };\n        safeStorage.setItem('quizStates', JSON.stringify(updatedStates));\n        safeStorage.setItem(`usedBlocks-${quizId}`, JSON.stringify(updatedUsedBlocks));\n        return updatedStates;\n      });\n    } catch (error) {\n      handleError(error, 'Не вдалося позначити блок як використаний.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(QuizContext.Provider, {\n    value: {\n      showQuizPage,\n      setShowQuizPage,\n      selectedMode,\n      setSelectedMode,\n      currentQuizId,\n      setCurrentQuizId,\n      quizStates,\n      setQuizStates,\n      updateQuizState,\n      markBlockAsUsed,\n      data\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s2(QuizProvider, \"EN9SL4GETA+q1/TcnZ2DdqWYAaw=\");\n_c = QuizProvider;\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","loadJsonDataByMode","safeStorage","safeJsonParse","handleError","jsxDEV","_jsxDEV","QuizContext","useQuizContext","_s","QuizProvider","children","_s2","showQuizPage","setShowQuizPage","getItem","selectedMode","setSelectedMode","currentQuizId","setCurrentQuizId","quizStates","setQuizStates","savedStates","data","setData","savedData","setItem","toString","selectedData","categories","updateQuizState","JSON","stringify","error","uuid","newState","prevStates","updatedStates","markBlockAsUsed","quizId","categoryId","blockId","Error","previousState","updatedUsedBlocks","usedBlocks","includes","push","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/context/QuizContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\r\nimport { safeStorage, safeJsonParse, handleError } from '../utils/errorHandling';\r\n\r\nconst QuizContext = createContext();\r\n\r\nexport function useQuizContext() {\r\n  return useContext(QuizContext);\r\n}\r\n\r\nexport function QuizProvider({ children }) {\r\n  // Ініціалізація стану з безпечним отриманням даних\r\n  const [showQuizPage, setShowQuizPage] = useState(() => {\r\n    return safeStorage.getItem('showQuizPage') === 'true';\r\n  });\r\n\r\n  const [selectedMode, setSelectedMode] = useState(() => {\r\n    return safeStorage.getItem('selectedMode', null);\r\n  });\r\n\r\n  const [currentQuizId, setCurrentQuizId] = useState(() => {\r\n    return safeStorage.getItem('currentQuizId', null);\r\n  });\r\n\r\n  const [quizStates, setQuizStates] = useState(() => {\r\n    const savedStates = safeStorage.getItem('quizStates');\r\n    return safeJsonParse(savedStates, {});\r\n  });\r\n\r\n  const [data, setData] = useState(() => {\r\n    const savedData = safeStorage.getItem('data');\r\n    return safeJsonParse(savedData, null);\r\n  });\r\n\r\n  // Безпечне оновлення localStorage при зміні стану\r\n  useEffect(() => {\r\n    safeStorage.setItem('showQuizPage', showQuizPage.toString());\r\n  }, [showQuizPage]);\r\n\r\n  useEffect(() => {\r\n    if (selectedMode !== null) {\r\n      safeStorage.setItem('selectedMode', selectedMode);\r\n    }\r\n  }, [selectedMode]);\r\n\r\n  useEffect(() => {\r\n    if (currentQuizId !== null) {\r\n      safeStorage.setItem('currentQuizId', currentQuizId);\r\n    }\r\n  }, [currentQuizId]);\r\n\r\n  // Безпечне завантаження даних вікторини\r\n  useEffect(() => {\r\n    if (selectedMode && currentQuizId) {\r\n      try {\r\n        const selectedData = loadJsonDataByMode(selectedMode);\r\n        if (selectedData?.categories) {\r\n          setData(selectedData.categories);\r\n          updateQuizState(currentQuizId, { data: selectedData.categories });\r\n          safeStorage.setItem('data', JSON.stringify(selectedData.categories));\r\n        }\r\n      } catch (error) {\r\n        handleError(error, 'Не вдалося завантажити дані вікторини.');\r\n      }\r\n    }\r\n  }, [selectedMode, currentQuizId]);\r\n\r\n  // Безпечне оновлення стану вікторини\r\n  const updateQuizState = (uuid, newState) => {\r\n    try {\r\n      setQuizStates((prevStates) => {\r\n        const updatedStates = {\r\n          ...prevStates,\r\n          [uuid]: {\r\n            ...prevStates[uuid],\r\n            ...newState,\r\n          },\r\n        };\r\n        safeStorage.setItem('quizStates', JSON.stringify(updatedStates));\r\n        return updatedStates;\r\n      });\r\n    } catch (error) {\r\n      handleError(error, 'Не вдалося оновити стан вікторини.');\r\n    }\r\n  };\r\n\r\n  // Безпечне позначення блоку як використаного\r\n  const markBlockAsUsed = (quizId, categoryId, blockId) => {\r\n    try {\r\n      if (!categoryId) {\r\n        throw new Error('Не вказано категорію.');\r\n      }\r\n\r\n      setQuizStates((prevStates) => {\r\n        const previousState = prevStates[quizId] || {};\r\n        const updatedUsedBlocks = { ...previousState.usedBlocks };\r\n\r\n        if (!updatedUsedBlocks[categoryId]) {\r\n          updatedUsedBlocks[categoryId] = [];\r\n        }\r\n\r\n        if (!updatedUsedBlocks[categoryId].includes(blockId)) {\r\n          updatedUsedBlocks[categoryId].push(blockId);\r\n        }\r\n\r\n        const updatedStates = {\r\n          ...prevStates,\r\n          [quizId]: {\r\n            ...previousState,\r\n            usedBlocks: updatedUsedBlocks,\r\n          },\r\n        };\r\n\r\n        safeStorage.setItem('quizStates', JSON.stringify(updatedStates));\r\n        safeStorage.setItem(`usedBlocks-${quizId}`, JSON.stringify(updatedUsedBlocks));\r\n\r\n        return updatedStates;\r\n      });\r\n    } catch (error) {\r\n      handleError(error, 'Не вдалося позначити блок як використаний.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <QuizContext.Provider value={{\r\n      showQuizPage,\r\n      setShowQuizPage,\r\n      selectedMode,\r\n      setSelectedMode,\r\n      currentQuizId,\r\n      setCurrentQuizId,\r\n      quizStates,\r\n      setQuizStates,\r\n      updateQuizState,\r\n      markBlockAsUsed,\r\n      data\r\n    }}>\r\n      {children}\r\n    </QuizContext.Provider>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}