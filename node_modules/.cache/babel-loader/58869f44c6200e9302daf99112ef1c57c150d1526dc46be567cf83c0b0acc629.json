{"ast":null,"code":"// src/utils/quizPageUtils.js\n\n// Подсчет общего количества блоков\nexport const getTotalBlocks = data => {\n  return (data === null || data === void 0 ? void 0 : data.reduce((acc, category) => acc + category.blocks.length, 0)) || 0;\n};\n\n// Подсчет количества использованных блоков\nexport const getUsedBlocksCount = currentQuizState => {\n  return Object.values(currentQuizState.usedBlocks || {}).reduce((acc, categoryBlocks) => acc + categoryBlocks.length, 0);\n};\n\n// Обработка выбора блока\nexport const handleBlockSelect = (block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\n  var _currentQuizState$use, _currentQuizState$use2;\n  setSelectedBlock(block);\n  setSelectedCategory(category);\n  if ((_currentQuizState$use = currentQuizState.usedBlocks) !== null && _currentQuizState$use !== void 0 && (_currentQuizState$use2 = _currentQuizState$use[category.id]) !== null && _currentQuizState$use2 !== void 0 && _currentQuizState$use2.includes(block.id)) {\n    setIsBlockUsed(true); // Блок уже использован\n  } else {\n    setIsBlockUsed(false); // Блок не использован\n  }\n};\n\n// Обработка закрытия модального окна\nexport const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\n  setSelectedBlock(null);\n  setSelectedCategory(null);\n  setIsBlockUsed(false); // Сброс состояния\n};\n\n// Обработка завершения игры\nexport const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\n  localStorage.removeItem(`data-${currentQuizId}`);\n  localStorage.removeItem(`usedBlocks-${currentQuizId}`);\n  localStorage.removeItem('quizStates');\n  setQuizStates(prevStates => ({\n    ...prevStates,\n    [currentQuizId]: {\n      usedBlocks: {},\n      data: null\n    }\n  }));\n  setConfettiRunning(false);\n  setShowEndMessage(false);\n};\n\n// Обработка возврата в главное меню\nexport const handleMainMenu = (currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false) => {\n  if (clearState) {\n    localStorage.removeItem(`data-${currentQuizId}`);\n    setQuizStates(prevStates => ({\n      ...prevStates,\n      [currentQuizId]: {\n        usedBlocks: {},\n        data: null\n      }\n    }));\n  }\n  setShowQuizPage(false);\n  setConfettiRunning(false);\n};\n\n// Обработка выбора категории и запуска конфетти\nexport const handleSelectCategory = (categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal) => {\n  // Убрал проверку blockId, так как возможно blockId может быть 0\n  if (!currentQuizId || !categoryId) {\n    console.error('Не удалось обработать выбор категории. Недостаточно данных.');\n    return;\n  }\n\n  // Логируем, что функция была вызвана с правильными параметрами\n  console.log(`Выбор категории: categoryId=${categoryId}, blockId=${blockId}, currentQuizId=${currentQuizId}`);\n\n  // Отметим блок как использованный\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\n\n  // Логика для завершения игры и запуска конфетти\n  if (usedBlocksCount + 1 === totalBlocks) {\n    console.log('Все блоки использованы, запускаем конфетти');\n    setConfettiRunning(true);\n    setShowEndMessage(true);\n  } else {\n    console.log(`Использовано ${usedBlocksCount + 1} блоков из ${totalBlocks}`);\n  }\n\n  // Закрытие модального окна\n  handleCloseModal();\n};","map":{"version":3,"names":["getTotalBlocks","data","reduce","acc","category","blocks","length","getUsedBlocksCount","currentQuizState","Object","values","usedBlocks","categoryBlocks","handleBlockSelect","block","setSelectedBlock","setSelectedCategory","setIsBlockUsed","_currentQuizState$use","_currentQuizState$use2","id","includes","handleCloseModal","handleNewGame","currentQuizId","setQuizStates","setConfettiRunning","setShowEndMessage","localStorage","removeItem","prevStates","handleMainMenu","setShowQuizPage","clearState","handleSelectCategory","categoryId","blockId","markBlockAsUsed","totalBlocks","usedBlocksCount","console","error","log"],"sources":["E:/quiz-app-react/src/components/QuizPage/quizPageUtils.js"],"sourcesContent":["// src/utils/quizPageUtils.js\r\n\r\n// Подсчет общего количества блоков\r\nexport const getTotalBlocks = (data) => {\r\n  return data?.reduce((acc, category) => acc + category.blocks.length, 0) || 0;\r\n};\r\n\r\n// Подсчет количества использованных блоков\r\nexport const getUsedBlocksCount = (currentQuizState) => {\r\n  return Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n    (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n    0\r\n  );\r\n};\r\n\r\n// Обработка выбора блока\r\nexport const handleBlockSelect = (\r\n  block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed\r\n) => {\r\n  setSelectedBlock(block);\r\n  setSelectedCategory(category);\r\n\r\n  if (currentQuizState.usedBlocks?.[category.id]?.includes(block.id)) {\r\n    setIsBlockUsed(true); // Блок уже использован\r\n  } else {\r\n    setIsBlockUsed(false); // Блок не использован\r\n  }\r\n};\r\n\r\n// Обработка закрытия модального окна\r\nexport const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\r\n  setSelectedBlock(null);\r\n  setSelectedCategory(null);\r\n  setIsBlockUsed(false); // Сброс состояния\r\n};\r\n\r\n// Обработка завершения игры\r\nexport const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\r\n  localStorage.removeItem(`data-${currentQuizId}`);\r\n  localStorage.removeItem(`usedBlocks-${currentQuizId}`);\r\n  localStorage.removeItem('quizStates');\r\n\r\n  setQuizStates((prevStates) => ({\r\n    ...prevStates,\r\n    [currentQuizId]: {\r\n      usedBlocks: {},\r\n      data: null,\r\n    },\r\n  }));\r\n\r\n  setConfettiRunning(false);\r\n  setShowEndMessage(false);\r\n};\r\n\r\n// Обработка возврата в главное меню\r\nexport const handleMainMenu = (\r\n  currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false\r\n) => {\r\n  if (clearState) {\r\n    localStorage.removeItem(`data-${currentQuizId}`);\r\n    setQuizStates((prevStates) => ({\r\n      ...prevStates,\r\n      [currentQuizId]: {\r\n        usedBlocks: {},\r\n        data: null,\r\n      },\r\n    }));\r\n  }\r\n  setShowQuizPage(false);\r\n  setConfettiRunning(false);\r\n};\r\n\r\n// Обработка выбора категории и запуска конфетти\r\nexport const handleSelectCategory = (\r\n  categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal\r\n) => {\r\n  // Убрал проверку blockId, так как возможно blockId может быть 0\r\n  if (!currentQuizId || !categoryId) {\r\n    console.error('Не удалось обработать выбор категории. Недостаточно данных.');\r\n    return;\r\n  }\r\n\r\n  // Логируем, что функция была вызвана с правильными параметрами\r\n  console.log(`Выбор категории: categoryId=${categoryId}, blockId=${blockId}, currentQuizId=${currentQuizId}`);\r\n\r\n  // Отметим блок как использованный\r\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n  // Логика для завершения игры и запуска конфетти\r\n  if (usedBlocksCount + 1 === totalBlocks) {\r\n    console.log('Все блоки использованы, запускаем конфетти');\r\n    setConfettiRunning(true);\r\n    setShowEndMessage(true);\r\n  } else {\r\n    console.log(`Использовано ${usedBlocksCount + 1} блоков из ${totalBlocks}`);\r\n  }\r\n\r\n  // Закрытие модального окна\r\n  handleCloseModal();\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}