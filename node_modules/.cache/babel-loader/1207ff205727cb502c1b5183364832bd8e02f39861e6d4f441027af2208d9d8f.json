{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport ContentContainer from './ContentContainer';\nimport EndMessage from './EndMessage';\nimport MenuModal from './MenuModal';\nimport Settings from './Settings';\nimport styles from '../styles/QuizPage.module.css';\nimport { useQuizContext } from '../context/QuizContext';\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizPage({\n  quizId\n}) {\n  _s();\n  const {\n    usedBlocks,\n    selectedMode,\n    setShowQuizPage,\n    quizStates,\n    updateQuizState,\n    markBlockAsUsed\n  } = useQuizContext();\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [data, setData] = useState(null);\n  const currentQuizState = quizStates[quizId] || {};\n  useEffect(() => {\n    if (selectedMode && quizId) {\n      const selectedData = loadJsonDataByMode(selectedMode);\n      if (selectedData) {\n        setData(selectedData.categories);\n        updateQuizState(quizId, {\n          data: selectedData.categories\n        });\n      }\n    }\n  }, [selectedMode, quizId]);\n  const handleBlockUse = (categoryName, blockId) => {\n    markBlockAsUsed(categoryName, blockId); // Отмечаем блок как использованный\n  };\n  const showSettings = () => {\n    setIsSettingsVisible(true);\n  };\n  const hideSettings = () => {\n    setIsSettingsVisible(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n      usedBlocks: usedBlocks,\n      markBlockAsUsed: handleBlockUse // Передаем функцию для отметки блоков\n      ,\n      data: data || currentQuizState.data,\n      mode: selectedMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: showSettings,\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: hideSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"hF8sqwKXj7rJNT0425PYvOq0gb8=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","Header","ContentContainer","EndMessage","MenuModal","Settings","styles","useQuizContext","loadJsonDataByMode","jsxDEV","_jsxDEV","QuizPage","quizId","_s","usedBlocks","selectedMode","setShowQuizPage","quizStates","updateQuizState","markBlockAsUsed","isSettingsVisible","setIsSettingsVisible","data","setData","currentQuizState","selectedData","categories","handleBlockUse","categoryName","blockId","showSettings","hideSettings","className","quiz_page","children","fileName","_jsxFileName","lineNumber","columnNumber","mode","showMainMenu","onClose","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/QuizPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport ContentContainer from './ContentContainer';\r\nimport EndMessage from './EndMessage';\r\nimport MenuModal from './MenuModal';\r\nimport Settings from './Settings';\r\nimport styles from '../styles/QuizPage.module.css';\r\nimport { useQuizContext } from '../context/QuizContext';\r\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\r\n\r\nfunction QuizPage({ quizId }) {\r\n  const { usedBlocks, selectedMode, setShowQuizPage, quizStates, updateQuizState, markBlockAsUsed } = useQuizContext();\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  const currentQuizState = quizStates[quizId] || {};\r\n\r\n  useEffect(() => {\r\n    if (selectedMode && quizId) {\r\n      const selectedData = loadJsonDataByMode(selectedMode);\r\n      if (selectedData) {\r\n        setData(selectedData.categories);\r\n        updateQuizState(quizId, { data: selectedData.categories });\r\n      }\r\n    }\r\n  }, [selectedMode, quizId]);\r\n\r\n  const handleBlockUse = (categoryName, blockId) => {\r\n    markBlockAsUsed(categoryName, blockId); // Отмечаем блок как использованный\r\n  };\r\n\r\n  const showSettings = () => {\r\n    setIsSettingsVisible(true);\r\n  };\r\n\r\n  const hideSettings = () => {\r\n    setIsSettingsVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <Header />\r\n      <ContentContainer\r\n        usedBlocks={usedBlocks}\r\n        markBlockAsUsed={handleBlockUse} // Передаем функцию для отметки блоков\r\n        data={data || currentQuizState.data}\r\n        mode={selectedMode}\r\n      />\r\n      <EndMessage />\r\n      <MenuModal showSettings={showSettings} showMainMenu={() => setShowQuizPage(false)} />\r\n      {isSettingsVisible && <Settings onClose={hideSettings} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}