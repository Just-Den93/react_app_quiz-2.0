{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizPage({\n  mode,\n  quizId\n}) {\n  _s();\n  const {\n    quizStates,\n    updateQuizState\n  } = useQuizContext();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    if (mode && quizId) {\n      const selectedData = loadQuizDataByModeAndId(mode, quizId);\n      if (selectedData) {\n        setData(selectedData.categories);\n      }\n    }\n  }, [mode, quizId]);\n  const handleUpdateState = newState => {\n    updateQuizState(quizId, newState);\n  };\n\n  // Извлечение текущего состояния викторины из контекста\n  const currentQuizState = quizStates[quizId] || {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n      usedBlocks: currentQuizState.usedBlocks || [],\n      markBlockAsUsed: (categoryName, blockId) => {\n        handleUpdateState({\n          usedBlocks: [...currentQuizState.usedBlocks, blockId]\n        });\n      },\n      data: data,\n      mode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => handleUpdateState({\n        settingsVisible: true\n      }),\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), currentQuizState.settingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => handleUpdateState({\n        settingsVisible: false\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 44\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"QIKj4mt+Gz3xYaWKYzehRgASdIA=\", true);\n_c = QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["QuizPage","mode","quizId","_s","quizStates","updateQuizState","useQuizContext","data","setData","useState","useEffect","selectedData","loadQuizDataByModeAndId","categories","handleUpdateState","newState","currentQuizState","_jsxDEV","className","styles","quiz_page","children","Header","fileName","_jsxFileName","lineNumber","columnNumber","ContentContainer","usedBlocks","markBlockAsUsed","categoryName","blockId","EndMessage","MenuModal","showSettings","settingsVisible","showMainMenu","setShowQuizPage","Settings","onClose","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/QuizPage.jsx"],"sourcesContent":["function QuizPage({ mode, quizId }) {\r\n  const { quizStates, updateQuizState } = useQuizContext();\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (mode && quizId) {\r\n      const selectedData = loadQuizDataByModeAndId(mode, quizId);\r\n      if (selectedData) {\r\n        setData(selectedData.categories);\r\n      }\r\n    }\r\n  }, [mode, quizId]);\r\n\r\n  const handleUpdateState = (newState) => {\r\n    updateQuizState(quizId, newState);\r\n  };\r\n\r\n  // Извлечение текущего состояния викторины из контекста\r\n  const currentQuizState = quizStates[quizId] || {};\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <Header />\r\n      <ContentContainer\r\n        usedBlocks={currentQuizState.usedBlocks || []}\r\n        markBlockAsUsed={(categoryName, blockId) => {\r\n          handleUpdateState({ usedBlocks: [...currentQuizState.usedBlocks, blockId] });\r\n        }}\r\n        data={data}\r\n        mode={mode}\r\n      />\r\n      <EndMessage />\r\n      <MenuModal showSettings={() => handleUpdateState({ settingsVisible: true })} showMainMenu={() => setShowQuizPage(false)} />\r\n      {currentQuizState.settingsVisible && <Settings onClose={() => handleUpdateState({ settingsVisible: false })} />}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,SAASA,QAAQA,CAAC;EAAEC,IAAI;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM;IAAEC,UAAU;IAAEC;EAAgB,CAAC,GAAGC,cAAc,CAAC,CAAC;EACxD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,IAAIT,IAAI,IAAIC,MAAM,EAAE;MAClB,MAAMS,YAAY,GAAGC,uBAAuB,CAACX,IAAI,EAAEC,MAAM,CAAC;MAC1D,IAAIS,YAAY,EAAE;QAChBH,OAAO,CAACG,YAAY,CAACE,UAAU,CAAC;MAClC;IACF;EACF,CAAC,EAAE,CAACZ,IAAI,EAAEC,MAAM,CAAC,CAAC;EAElB,MAAMY,iBAAiB,GAAIC,QAAQ,IAAK;IACtCV,eAAe,CAACH,MAAM,EAAEa,QAAQ,CAAC;EACnC,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGZ,UAAU,CAACF,MAAM,CAAC,IAAI,CAAC,CAAC;EAEjD,oBACEe,OAAA;IAAKC,SAAS,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,gBAC/BJ,OAAA,CAACK,MAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVT,OAAA,CAACU,gBAAgB;MACfC,UAAU,EAAEZ,gBAAgB,CAACY,UAAU,IAAI,EAAG;MAC9CC,eAAe,EAAEA,CAACC,YAAY,EAAEC,OAAO,KAAK;QAC1CjB,iBAAiB,CAAC;UAAEc,UAAU,EAAE,CAAC,GAAGZ,gBAAgB,CAACY,UAAU,EAAEG,OAAO;QAAE,CAAC,CAAC;MAC9E,CAAE;MACFxB,IAAI,EAAEA,IAAK;MACXN,IAAI,EAAEA;IAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACFT,OAAA,CAACe,UAAU;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACdT,OAAA,CAACgB,SAAS;MAACC,YAAY,EAAEA,CAAA,KAAMpB,iBAAiB,CAAC;QAAEqB,eAAe,EAAE;MAAK,CAAC,CAAE;MAACC,YAAY,EAAEA,CAAA,KAAMC,eAAe,CAAC,KAAK;IAAE;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC1HV,gBAAgB,CAACmB,eAAe,iBAAIlB,OAAA,CAACqB,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAMzB,iBAAiB,CAAC;QAAEqB,eAAe,EAAE;MAAM,CAAC;IAAE;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5G,CAAC;AAEV;AAACvB,EAAA,CApCQH,QAAQ;AAAAwC,EAAA,GAARxC,QAAQ;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}