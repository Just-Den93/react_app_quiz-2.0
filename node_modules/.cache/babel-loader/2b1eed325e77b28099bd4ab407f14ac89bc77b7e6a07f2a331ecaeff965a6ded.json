{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\app-quiz-react-project\\\\quiz-app\\\\src\\\\components\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport ContentContainer from './ContentContainer';\nimport EndMessage from './EndMessage';\nimport MenuModal from './MenuModal';\nimport Settings from './Settings';\nimport styles from '../styles/QuizPage.module.css';\nimport { useQuizContext } from '../context/QuizContext';\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    quizStates,\n    updateQuizState,\n    markBlockAsUsed,\n    setShowQuizPage,\n    selectedMode,\n    currentQuizId\n  } = useQuizContext();\n  const currentQuizState = quizStates[currentQuizId] || {};\n  const [data, setData] = useState(currentQuizState.data || null);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  useEffect(() => {\n    console.log('Current Quiz ID:', currentQuizId);\n    console.log('Current Quiz State:', currentQuizState);\n    if (!data && currentQuizId && selectedMode) {\n      console.log('Loading data for mode:', selectedMode);\n      const selectedData = loadJsonDataByMode(selectedMode);\n      if (selectedData) {\n        console.log('Data loaded:', selectedData);\n        setData(selectedData.categories);\n        updateQuizState(currentQuizId, {\n          data: selectedData.categories\n        });\n      } else {\n        console.log('No data found for mode:', selectedMode);\n      }\n    }\n  }, [data, currentQuizId, selectedMode, currentQuizState, updateQuizState]);\n  useEffect(() => {\n    console.log('Used blocks in currentQuizState:', currentQuizState.usedBlocks);\n  }, [currentQuizState.usedBlocks]);\n  const handleBlockUse = (categoryName, blockId) => {\n    markBlockAsUsed(currentQuizId, categoryName, blockId);\n  };\n  const showSettings = () => {\n    setIsSettingsVisible(true);\n  };\n  const hideSettings = () => {\n    setIsSettingsVisible(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), data ? /*#__PURE__*/_jsxDEV(ContentContainer, {\n      usedBlocks: currentQuizState.usedBlocks || {},\n      markBlockAsUsed: handleBlockUse,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: showSettings,\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: hideSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(QuizPage, \"1qkiNC/cv69TUy/Fi9+8p3fSboY=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","Header","ContentContainer","EndMessage","MenuModal","Settings","styles","useQuizContext","loadJsonDataByMode","jsxDEV","_jsxDEV","QuizPage","_s","quizStates","updateQuizState","markBlockAsUsed","setShowQuizPage","selectedMode","currentQuizId","currentQuizState","data","setData","isSettingsVisible","setIsSettingsVisible","console","log","selectedData","categories","usedBlocks","handleBlockUse","categoryName","blockId","showSettings","hideSettings","className","quiz_page","children","fileName","_jsxFileName","lineNumber","columnNumber","showMainMenu","onClose","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/app-quiz-react-project/quiz-app/src/components/QuizPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport ContentContainer from './ContentContainer';\r\nimport EndMessage from './EndMessage';\r\nimport MenuModal from './MenuModal';\r\nimport Settings from './Settings';\r\nimport styles from '../styles/QuizPage.module.css';\r\nimport { useQuizContext } from '../context/QuizContext';\r\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\r\n\r\nfunction QuizPage() {\r\n    const { quizStates, updateQuizState, markBlockAsUsed, setShowQuizPage, selectedMode, currentQuizId } = useQuizContext();\r\n    const currentQuizState = quizStates[currentQuizId] || {};\r\n    const [data, setData] = useState(currentQuizState.data || null);\r\n    const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log('Current Quiz ID:', currentQuizId);\r\n        console.log('Current Quiz State:', currentQuizState);\r\n\r\n        if (!data && currentQuizId && selectedMode) {\r\n            console.log('Loading data for mode:', selectedMode);\r\n            const selectedData = loadJsonDataByMode(selectedMode);\r\n            if (selectedData) {\r\n                console.log('Data loaded:', selectedData);\r\n                setData(selectedData.categories);\r\n                updateQuizState(currentQuizId, { data: selectedData.categories });\r\n            } else {\r\n                console.log('No data found for mode:', selectedMode);\r\n            }\r\n        }\r\n    }, [data, currentQuizId, selectedMode, currentQuizState, updateQuizState]);\r\n\r\n    useEffect(() => {\r\n        console.log('Used blocks in currentQuizState:', currentQuizState.usedBlocks);\r\n    }, [currentQuizState.usedBlocks]);\r\n\r\n    const handleBlockUse = (categoryName, blockId) => {\r\n        markBlockAsUsed(currentQuizId, categoryName, blockId);\r\n    };\r\n\r\n    const showSettings = () => {\r\n        setIsSettingsVisible(true);\r\n    };\r\n\r\n    const hideSettings = () => {\r\n        setIsSettingsVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.quiz_page}>\r\n            <Header />\r\n            {data ? (\r\n                <ContentContainer\r\n                    usedBlocks={currentQuizState.usedBlocks || {}}\r\n                    markBlockAsUsed={handleBlockUse}\r\n                    data={data}\r\n                />\r\n            ) : (\r\n                <div>No data available.</div>\r\n            )}\r\n            <EndMessage />\r\n            <MenuModal showSettings={showSettings} showMainMenu={() => setShowQuizPage(false)} />\r\n            {isSettingsVisible && <Settings onClose={hideSettings} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}