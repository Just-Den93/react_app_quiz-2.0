{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\QuizPage\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from 'react';\nimport ContentContainer from '../ContentContainer/ContentContainer';\nimport EndMessage from '../EndMessage/EndMessage';\nimport MenuModal from '../MenuModal/MenuModal';\nimport Modal from '../Modal/Modal';\nimport Settings from '../Settings/Settings';\nimport ConfettiAnimation from '../ConfettiAnimation/ConfettiAnimation'; // Добавляем компонент для конфетти\nimport styles from './QuizPage.module.css';\nimport { useQuizContext } from '../../context/QuizContext';\nimport PCImage from '../../images/PC_horizontal_1line_black.svg'; // Убедитесь, что путь к изображению верен  \nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    quizStates,\n    setShowQuizPage,\n    currentQuizId,\n    selectedMode,\n    data,\n    markBlockAsUsed\n  } = useQuizContext();\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [confettiRunning, setConfettiRunning] = useState(false); // Стейт для анимации конфетти\n\n  // Подсчет общего количества блоков и уже использованных\n  const totalBlocks = useMemo(() => {\n    return (data === null || data === void 0 ? void 0 : data.reduce((acc, category) => acc + category.blocks.length, 0)) || 0;\n  }, [data]);\n  const usedBlocksCount = useMemo(() => {\n    return Object.values(currentQuizState.usedBlocks || {}).reduce((acc, categoryBlocks) => acc + categoryBlocks.length, 0);\n  }, [currentQuizState]);\n  const handleBlockSelect = (block, category) => {\n    setSelectedBlock(block);\n    setSelectedCategory(category);\n  };\n  const handleCloseModal = () => {\n    setSelectedBlock(null);\n    setSelectedCategory(null);\n  };\n  const handleSelectCategory = (categoryId, blockId) => {\n    markBlockAsUsed(currentQuizId, categoryId, blockId);\n\n    // Проверка: остался ли это последний блок среди всех категорий\n    if (usedBlocksCount === totalBlocks - 1) {\n      // Запускаем анимацию конфетти, если этот блок последний\n      setConfettiRunning(true);\n      setTimeout(() => {\n        setConfettiRunning(false);\n      }, 5000);\n    }\n    handleCloseModal(); // Закрываем модальное окно после выбора категории\n  };\n  useEffect(() => {\n    console.log('Data in QuizPage:', data);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(ConfettiAnimation, {\n      isRunning: confettiRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), \" \", data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: PCImage,\n        alt: \"PC horizontal line\",\n        className: styles.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n        data: data,\n        onBlockSelect: handleBlockSelect,\n        usedBlocks: currentQuizState.usedBlocks || {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), selectedBlock && /*#__PURE__*/_jsxDEV(Modal, {\n        block: selectedBlock,\n        categoryName: (selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.name) || 'Без категории',\n        onClose: handleCloseModal,\n        selectedMode: selectedMode,\n        onSelectCategory: handleSelectCategory // Передаем управление выбором в QuizPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => setIsSettingsVisible(true),\n      showMainMenu: () => setShowQuizPage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => setIsSettingsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"OztfOrZ7GYRMtDoAqrshacGOFZ0=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","ContentContainer","EndMessage","MenuModal","Modal","Settings","ConfettiAnimation","styles","useQuizContext","PCImage","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","_s","quizStates","setShowQuizPage","currentQuizId","selectedMode","data","markBlockAsUsed","currentQuizState","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","selectedCategory","setSelectedCategory","confettiRunning","setConfettiRunning","totalBlocks","reduce","acc","category","blocks","length","usedBlocksCount","Object","values","usedBlocks","categoryBlocks","handleBlockSelect","block","handleCloseModal","handleSelectCategory","categoryId","blockId","setTimeout","console","log","className","quiz_page","children","isRunning","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","image","onBlockSelect","categoryName","name","onClose","onSelectCategory","showSettings","showMainMenu","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/QuizPage/QuizPage.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\nimport EndMessage from '../EndMessage/EndMessage';\r\nimport MenuModal from '../MenuModal/MenuModal';\r\nimport Modal from '../Modal/Modal';\r\nimport Settings from '../Settings/Settings';\r\nimport ConfettiAnimation from '../ConfettiAnimation/ConfettiAnimation'; // Добавляем компонент для конфетти\r\nimport styles from './QuizPage.module.css';\r\nimport { useQuizContext } from '../../context/QuizContext';\r\nimport PCImage from '../../images/PC_horizontal_1line_black.svg'; // Убедитесь, что путь к изображению верен  \r\n\r\nfunction QuizPage() {\r\n  const { quizStates, setShowQuizPage, currentQuizId, selectedMode, data, markBlockAsUsed } = useQuizContext();\r\n\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [confettiRunning, setConfettiRunning] = useState(false); // Стейт для анимации конфетти\r\n\r\n  // Подсчет общего количества блоков и уже использованных\r\n  const totalBlocks = useMemo(() => {\r\n    return data?.reduce((acc, category) => acc + category.blocks.length, 0) || 0;\r\n  }, [data]);\r\n\r\n  const usedBlocksCount = useMemo(() => {\r\n    return Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n      (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n      0\r\n    );\r\n  }, [currentQuizState]);\r\n\r\n  const handleBlockSelect = (block, category) => {\r\n    setSelectedBlock(block);\r\n    setSelectedCategory(category);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setSelectedBlock(null);\r\n    setSelectedCategory(null);\r\n  };\r\n\r\n  const handleSelectCategory = (categoryId, blockId) => {\r\n    markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n    // Проверка: остался ли это последний блок среди всех категорий\r\n    if (usedBlocksCount === totalBlocks - 1) {\r\n      // Запускаем анимацию конфетти, если этот блок последний\r\n      setConfettiRunning(true);\r\n      setTimeout(() => {\r\n        setConfettiRunning(false);\r\n      }, 5000);\r\n    }\r\n\r\n    handleCloseModal();  // Закрываем модальное окно после выбора категории\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Data in QuizPage:', data);\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <ConfettiAnimation isRunning={confettiRunning} /> {/* Подключаем анимацию конфетти */}\r\n      {data ? (\r\n        <>\r\n          <img src={PCImage} alt=\"PC horizontal line\" className={styles.image} />\r\n          <ContentContainer\r\n            data={data}\r\n            onBlockSelect={handleBlockSelect}\r\n            usedBlocks={currentQuizState.usedBlocks || {}}\r\n          />\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              categoryName={selectedCategory?.name || 'Без категории'}\r\n              onClose={handleCloseModal}\r\n              selectedMode={selectedMode}\r\n              onSelectCategory={handleSelectCategory} // Передаем управление выбором в QuizPage\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n      <EndMessage />\r\n      <MenuModal\r\n        showSettings={() => setIsSettingsVisible(true)}\r\n        showMainMenu={() => setShowQuizPage(false)}\r\n      />\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}