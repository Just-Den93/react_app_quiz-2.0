{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\n\n// Thunk for fetching quiz data\nexport const fetchQuizData = createAsyncThunk('quiz/fetchQuizData', async mode => {\n  const data = await loadJsonDataByMode(mode);\n  return {\n    mode,\n    data\n  };\n});\nexport const setQuizState = (mode, state) => ({\n  type: 'SET_QUIZ_STATE',\n  payload: {\n    mode,\n    state\n  }\n});\nexport const markBlockAsUsed = (mode, categoryName, blockId) => ({\n  type: 'MARK_BLOCK_AS_USED',\n  payload: {\n    mode,\n    categoryName,\n    blockId\n  }\n});","map":{"version":3,"names":["createAsyncThunk","loadJsonDataByMode","fetchQuizData","mode","data","setQuizState","state","type","payload","markBlockAsUsed","categoryName","blockId"],"sources":["E:/quiz-app-react/src/store/actions.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { loadJsonDataByMode } from '../utils/loadJsonData';\r\n\r\n// Thunk for fetching quiz data\r\nexport const fetchQuizData = createAsyncThunk(\r\n  'quiz/fetchQuizData',\r\n  async (mode) => {\r\n    const data = await loadJsonDataByMode(mode);\r\n    return { mode, data };\r\n  }\r\n);\r\n\r\nexport const setQuizState = (mode, state) => ({\r\n  type: 'SET_QUIZ_STATE',\r\n  payload: { mode, state },\r\n});\r\n\r\nexport const markBlockAsUsed = (mode, categoryName, blockId) => ({\r\n  type: 'MARK_BLOCK_AS_USED',\r\n  payload: { mode, categoryName, blockId },\r\n});\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,kBAAkB,QAAQ,uBAAuB;;AAE1D;AACA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,oBAAoB,EACpB,MAAOG,IAAI,IAAK;EACd,MAAMC,IAAI,GAAG,MAAMH,kBAAkB,CAACE,IAAI,CAAC;EAC3C,OAAO;IAAEA,IAAI;IAAEC;EAAK,CAAC;AACvB,CACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAACF,IAAI,EAAEG,KAAK,MAAM;EAC5CC,IAAI,EAAE,gBAAgB;EACtBC,OAAO,EAAE;IAAEL,IAAI;IAAEG;EAAM;AACzB,CAAC,CAAC;AAEF,OAAO,MAAMG,eAAe,GAAGA,CAACN,IAAI,EAAEO,YAAY,EAAEC,OAAO,MAAM;EAC/DJ,IAAI,EAAE,oBAAoB;EAC1BC,OAAO,EAAE;IAAEL,IAAI;IAAEO,YAAY;IAAEC;EAAQ;AACzC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}