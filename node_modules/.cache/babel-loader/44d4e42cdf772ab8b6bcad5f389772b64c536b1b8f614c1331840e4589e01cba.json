{"ast":null,"code":"import { Category, QuizBlock, QuizState } from '../../../../types/quiz.types';\nimport React from 'react';\n\n// Типы для функций-утилит\n\n// Подсчет общего количества блоков\nexport const getTotalBlocks = data => {\n  return (data === null || data === void 0 ? void 0 : data.reduce((acc, category) => {\n    var _category$blocks;\n    return acc + (((_category$blocks = category.blocks) === null || _category$blocks === void 0 ? void 0 : _category$blocks.length) || 0);\n  }, 0)) || 0;\n};\n\n// Подсчет количества использованных блоков\nexport const getUsedBlocksCount = currentQuizState => {\n  return Object.values(currentQuizState.usedBlocks || {}).reduce((acc, categoryBlocks) => acc + categoryBlocks.length, 0);\n};\n\n// Обработка выбора блока\nexport const handleBlockSelect = (block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\n  var _currentQuizState$use, _currentQuizState$use2;\n  setSelectedBlock(block);\n  setSelectedCategory(category);\n  const isUsed = (_currentQuizState$use = currentQuizState.usedBlocks) === null || _currentQuizState$use === void 0 ? void 0 : (_currentQuizState$use2 = _currentQuizState$use[category.id]) === null || _currentQuizState$use2 === void 0 ? void 0 : _currentQuizState$use2.includes(block.id);\n  setIsBlockUsed(!!isUsed);\n};\n\n// Обработка закрытия модального окна\nexport const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\n  setSelectedBlock(null);\n  setSelectedCategory(null);\n  setIsBlockUsed(false);\n};\n\n// Обработка новой игры\nexport const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\n  setQuizStates(prevStates => {\n    const currentGameState = prevStates[currentQuizId] || {};\n    const completedGames = (currentGameState.completedGames || 0) + 1;\n    return {\n      ...prevStates,\n      [currentQuizId]: {\n        ...currentGameState,\n        usedBlocks: {},\n        completedGames\n      }\n    };\n  });\n  setConfettiRunning(false);\n  setShowEndMessage(false);\n};\n\n// Обработка выбора категории\nexport const handleSelectCategory = (categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal) => {\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\n  if (usedBlocksCount + 1 === totalBlocks) {\n    setConfettiRunning(true);\n    setShowEndMessage(true);\n  }\n  handleCloseModal();\n};","map":{"version":3,"names":["Category","QuizBlock","QuizState","React","getTotalBlocks","data","reduce","acc","category","_category$blocks","blocks","length","getUsedBlocksCount","currentQuizState","Object","values","usedBlocks","categoryBlocks","handleBlockSelect","block","setSelectedBlock","setSelectedCategory","setIsBlockUsed","_currentQuizState$use","_currentQuizState$use2","isUsed","id","includes","handleCloseModal","handleNewGame","currentQuizId","setQuizStates","setConfettiRunning","setShowEndMessage","prevStates","currentGameState","completedGames","handleSelectCategory","categoryId","blockId","markBlockAsUsed","totalBlocks","usedBlocksCount"],"sources":["E:/quiz-app-react/src/components/features/Quiz/QuizPage/quizPageUtils.js"],"sourcesContent":["import { Category, QuizBlock, QuizState } from '../../../../types/quiz.types';\r\nimport React from 'react';\r\n\r\n// Типы для функций-утилит\r\ntype SetStateAction<T> = React.Dispatch<React.SetStateAction<T>>;\r\n\r\n// Подсчет общего количества блоков\r\nexport const getTotalBlocks = (data: Category[] | null): number => {\r\n  return data?.reduce((acc, category) => acc + (category.blocks?.length || 0), 0) || 0;\r\n};\r\n\r\n// Подсчет количества использованных блоков\r\nexport const getUsedBlocksCount = (currentQuizState: QuizState): number => {\r\n  return Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n    (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n    0\r\n  );\r\n};\r\n\r\n// Обработка выбора блока\r\nexport const handleBlockSelect = (\r\n  block: QuizBlock,\r\n  category: Category,\r\n  currentQuizState: QuizState,\r\n  setSelectedBlock: SetStateAction<QuizBlock | null>,\r\n  setSelectedCategory: SetStateAction<Category | null>,\r\n  setIsBlockUsed: SetStateAction<boolean>\r\n): void => {\r\n  setSelectedBlock(block);\r\n  setSelectedCategory(category);\r\n\r\n  const isUsed = currentQuizState.usedBlocks?.[category.id]?.includes(block.id);\r\n  setIsBlockUsed(!!isUsed);\r\n};\r\n\r\n// Обработка закрытия модального окна\r\nexport const handleCloseModal = (\r\n  setSelectedBlock: SetStateAction<QuizBlock | null>,\r\n  setSelectedCategory: SetStateAction<Category | null>,\r\n  setIsBlockUsed: SetStateAction<boolean>\r\n): void => {\r\n  setSelectedBlock(null);\r\n  setSelectedCategory(null);\r\n  setIsBlockUsed(false);\r\n};\r\n\r\n// Обработка новой игры\r\nexport const handleNewGame = (\r\n  currentQuizId: string,\r\n  setQuizStates: SetStateAction<{ [key: string]: QuizState }>,\r\n  setConfettiRunning: SetStateAction<boolean>,\r\n  setShowEndMessage: SetStateAction<boolean>\r\n): void => {\r\n  setQuizStates((prevStates) => {\r\n    const currentGameState = prevStates[currentQuizId] || {};\r\n    const completedGames = (currentGameState.completedGames || 0) + 1;\r\n\r\n    return {\r\n      ...prevStates,\r\n      [currentQuizId]: {\r\n        ...currentGameState,\r\n        usedBlocks: {},\r\n        completedGames,\r\n      },\r\n    };\r\n  });\r\n\r\n  setConfettiRunning(false);\r\n  setShowEndMessage(false);\r\n};\r\n\r\n// Обработка выбора категории\r\nexport const handleSelectCategory = (\r\n  categoryId: string,\r\n  blockId: number,\r\n  currentQuizId: string,\r\n  markBlockAsUsed: (quizId: string, categoryId: string, blockId: number) => void,\r\n  totalBlocks: number,\r\n  usedBlocksCount: number,\r\n  setConfettiRunning: SetStateAction<boolean>,\r\n  setShowEndMessage: SetStateAction<boolean>,\r\n  handleCloseModal: () => void\r\n): void => {\r\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n  if (usedBlocksCount + 1 === totalBlocks) {\r\n    setConfettiRunning(true);\r\n    setShowEndMessage(true);\r\n  }\r\n\r\n  handleCloseModal();\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}