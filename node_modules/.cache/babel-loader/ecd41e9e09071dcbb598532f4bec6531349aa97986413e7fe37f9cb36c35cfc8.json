{"ast":null,"code":"// src/utils/quizPageUtils.js\n// Подсчет общего количества блоков\nexport const getTotalBlocks=data=>{return(data===null||data===void 0?void 0:data.reduce((acc,category)=>acc+category.blocks.length,0))||0;};// Подсчет количества использованных блоков\nexport const getUsedBlocksCount=currentQuizState=>{return Object.values(currentQuizState.usedBlocks||{}).reduce((acc,categoryBlocks)=>acc+categoryBlocks.length,0);};// Обработка выбора блока\nexport const handleBlockSelect=(block,category,currentQuizState,setSelectedBlock,setSelectedCategory,setIsBlockUsed)=>{var _currentQuizState$use,_currentQuizState$use2;setSelectedBlock(block);setSelectedCategory(category);if((_currentQuizState$use=currentQuizState.usedBlocks)!==null&&_currentQuizState$use!==void 0&&(_currentQuizState$use2=_currentQuizState$use[category.id])!==null&&_currentQuizState$use2!==void 0&&_currentQuizState$use2.includes(block.id)){setIsBlockUsed(true);// Блок уже использован\n}else{setIsBlockUsed(false);// Блок не использован\n}};// Обработка закрытия модального окна\nexport const handleCloseModal=(setSelectedBlock,setSelectedCategory,setIsBlockUsed)=>{setSelectedBlock(null);setSelectedCategory(null);setIsBlockUsed(false);// Сброс состояния\n};// Обработка завершения игры\nexport const handleNewGame=(currentQuizId,setQuizStates,setConfettiRunning,setShowEndMessage)=>{localStorage.removeItem(\"data-\".concat(currentQuizId));localStorage.removeItem(\"usedBlocks-\".concat(currentQuizId));localStorage.removeItem('quizStates');setQuizStates(prevStates=>({...prevStates,[currentQuizId]:{usedBlocks:{},data:null}}));setConfettiRunning(false);setShowEndMessage(false);};// Обработка возврата в главное меню\nexport const handleMainMenu=function(currentQuizId,setQuizStates,setShowQuizPage,setConfettiRunning){let clearState=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;if(clearState){localStorage.removeItem(\"data-\".concat(currentQuizId));setQuizStates(prevStates=>({...prevStates,[currentQuizId]:{usedBlocks:{},data:null}}));}setShowQuizPage(false);setConfettiRunning(false);};// Обработка выбора категории и запуска конфетти\nexport const handleSelectCategory=(categoryId,blockId,currentQuizId,markBlockAsUsed,totalBlocks,usedBlocksCount,setConfettiRunning,setShowEndMessage,handleCloseModal)=>{markBlockAsUsed(currentQuizId,categoryId,blockId);if(usedBlocksCount===totalBlocks-1){setConfettiRunning(true);setShowEndMessage(true);}handleCloseModal();};","map":{"version":3,"names":["getTotalBlocks","data","reduce","acc","category","blocks","length","getUsedBlocksCount","currentQuizState","Object","values","usedBlocks","categoryBlocks","handleBlockSelect","block","setSelectedBlock","setSelectedCategory","setIsBlockUsed","_currentQuizState$use","_currentQuizState$use2","id","includes","handleCloseModal","handleNewGame","currentQuizId","setQuizStates","setConfettiRunning","setShowEndMessage","localStorage","removeItem","concat","prevStates","handleMainMenu","setShowQuizPage","clearState","arguments","undefined","handleSelectCategory","categoryId","blockId","markBlockAsUsed","totalBlocks","usedBlocksCount"],"sources":["E:/quiz-app-react/src/components/QuizPage/quizPageUtils.js"],"sourcesContent":["// src/utils/quizPageUtils.js\r\n\r\n// Подсчет общего количества блоков\r\nexport const getTotalBlocks = (data) => {\r\n  return data?.reduce((acc, category) => acc + category.blocks.length, 0) || 0;\r\n};\r\n\r\n// Подсчет количества использованных блоков\r\nexport const getUsedBlocksCount = (currentQuizState) => {\r\n  return Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n    (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n    0\r\n  );\r\n};\r\n\r\n// Обработка выбора блока\r\nexport const handleBlockSelect = (\r\n  block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed\r\n) => {\r\n  setSelectedBlock(block);\r\n  setSelectedCategory(category);\r\n\r\n  if (currentQuizState.usedBlocks?.[category.id]?.includes(block.id)) {\r\n    setIsBlockUsed(true); // Блок уже использован\r\n  } else {\r\n    setIsBlockUsed(false); // Блок не использован\r\n  }\r\n};\r\n\r\n// Обработка закрытия модального окна\r\nexport const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\r\n  setSelectedBlock(null);\r\n  setSelectedCategory(null);\r\n  setIsBlockUsed(false); // Сброс состояния\r\n};\r\n\r\n// Обработка завершения игры\r\nexport const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\r\n  localStorage.removeItem(`data-${currentQuizId}`);\r\n  localStorage.removeItem(`usedBlocks-${currentQuizId}`);\r\n  localStorage.removeItem('quizStates');\r\n\r\n  setQuizStates((prevStates) => ({\r\n    ...prevStates,\r\n    [currentQuizId]: {\r\n      usedBlocks: {},\r\n      data: null,\r\n    },\r\n  }));\r\n\r\n  setConfettiRunning(false);\r\n  setShowEndMessage(false);\r\n};\r\n\r\n// Обработка возврата в главное меню\r\nexport const handleMainMenu = (\r\n  currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false\r\n) => {\r\n  if (clearState) {\r\n    localStorage.removeItem(`data-${currentQuizId}`);\r\n    setQuizStates((prevStates) => ({\r\n      ...prevStates,\r\n      [currentQuizId]: {\r\n        usedBlocks: {},\r\n        data: null,\r\n      },\r\n    }));\r\n  }\r\n  setShowQuizPage(false);\r\n  setConfettiRunning(false);\r\n};\r\n\r\n// Обработка выбора категории и запуска конфетти\r\nexport const handleSelectCategory = (\r\n  categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal\r\n) => {\r\n  markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n  if (usedBlocksCount === totalBlocks - 1) {\r\n    setConfettiRunning(true);\r\n    setShowEndMessage(true);\r\n  }\r\n\r\n  handleCloseModal();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}