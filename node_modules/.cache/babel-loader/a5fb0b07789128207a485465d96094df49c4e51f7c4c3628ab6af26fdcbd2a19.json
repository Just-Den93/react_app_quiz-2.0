{"ast":null,"code":"// // Подсчет общего количества блоков\n// export const getTotalBlocks = (data) => {\n//   const totalBlocks = data?.reduce((acc, category) => acc + (category.blocks?.length || 0), 0) || 0;\n//   console.log('Total blocks:', totalBlocks);\n//   return totalBlocks;\n// };\n\n// // Подсчет количества использованных блоков\n// export const getUsedBlocksCount = (currentQuizState) => {\n//   const usedBlocksCount = Object.values(currentQuizState.usedBlocks || {}).reduce(\n//     (acc, categoryBlocks) => acc + categoryBlocks.length,\n//     0\n//   );\n//   console.log('Used blocks count:', usedBlocksCount);\n//   return usedBlocksCount;\n// };\n\n// // Обработка выбора блока\n// export const handleBlockSelect = (\n//   block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed\n// ) => {\n//   setSelectedBlock(block);\n//   setSelectedCategory(category);\n\n//   if (currentQuizState.usedBlocks?.[category.id]?.includes(block.id)) {\n//     setIsBlockUsed(true);\n//   } else {\n//     setIsBlockUsed(false);\n//   }\n// };\n\n// // Обработка закрытия модального окна\n// export const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\n//   setSelectedBlock(null);\n//   setSelectedCategory(null);\n//   setIsBlockUsed(false);\n// };\n\n// // Обработка завершения игры\n// export const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\n//   console.log('Starting new game for quiz:', currentQuizId);\n\n//   setQuizStates((prevStates) => {\n//     const currentGameState = prevStates[currentQuizId] || {};\n//     const completedGames = (currentGameState.completedGames || 0) + 1;\n\n//     // Сохраняем количество завершенных игр в localStorage\n//     const updatedState = {\n//       ...prevStates,\n//       [currentQuizId]: {\n//         ...currentGameState,\n//         usedBlocks: {}, // Обнуляем использованные блоки\n//         completedGames, // Обновляем количество завершенных игр\n//       },\n//     };\n//     localStorage.setItem('quizStates', JSON.stringify(updatedState));\n//     return updatedState;\n//   });\n\n//   setConfettiRunning(false);\n//   setShowEndMessage(false);\n// };\n\n// // Обработка возврата в главное меню\n// export const handleMainMenu = (\n//   currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false\n// ) => {\n//   console.log('Returning to main menu, clearing state:', clearState);\n\n//   if (clearState) {\n//     setQuizStates((prevStates) => {\n//       const currentGameState = prevStates[currentQuizId] || {};\n\n//       // Очищаем только использованные блоки, оставляем завершенные игры\n//       const updatedState = {\n//         ...prevStates,\n//         [currentQuizId]: {\n//           ...currentGameState,\n//           usedBlocks: {}, // Очищаем только использованные блоки\n//           completedGames: currentGameState.completedGames, // Сохраняем завершенные игры\n//         },\n//       };\n\n//       // Обновляем данные в localStorage\n//       localStorage.setItem('quizStates', JSON.stringify(updatedState));\n//       return updatedState;\n//     });\n//   }\n\n//   setShowQuizPage(false);\n//   setConfettiRunning(false);\n// };\n\n// // Обработка выбора категории и запуска конфетти\n// export const handleSelectCategory = (\n//   categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal\n// ) => {\n//   markBlockAsUsed(currentQuizId, categoryId, blockId);\n\n//   if (usedBlocksCount + 1 === totalBlocks) {\n//     setConfettiRunning(true);\n//     setShowEndMessage(true);\n//   }\n\n//   handleCloseModal();\n// };","map":{"version":3,"names":[],"sources":["E:/quiz-app-react/src/components/features/Quiz/QuizPage/quizPageUtils.js"],"sourcesContent":["// // Подсчет общего количества блоков\r\n// export const getTotalBlocks = (data) => {\r\n//   const totalBlocks = data?.reduce((acc, category) => acc + (category.blocks?.length || 0), 0) || 0;\r\n//   console.log('Total blocks:', totalBlocks);\r\n//   return totalBlocks;\r\n// };\r\n\r\n// // Подсчет количества использованных блоков\r\n// export const getUsedBlocksCount = (currentQuizState) => {\r\n//   const usedBlocksCount = Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n//     (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n//     0\r\n//   );\r\n//   console.log('Used blocks count:', usedBlocksCount);\r\n//   return usedBlocksCount;\r\n// };\r\n\r\n// // Обработка выбора блока\r\n// export const handleBlockSelect = (\r\n//   block, category, currentQuizState, setSelectedBlock, setSelectedCategory, setIsBlockUsed\r\n// ) => {\r\n//   setSelectedBlock(block);\r\n//   setSelectedCategory(category);\r\n\r\n//   if (currentQuizState.usedBlocks?.[category.id]?.includes(block.id)) {\r\n//     setIsBlockUsed(true);\r\n//   } else {\r\n//     setIsBlockUsed(false);\r\n//   }\r\n// };\r\n\r\n// // Обработка закрытия модального окна\r\n// export const handleCloseModal = (setSelectedBlock, setSelectedCategory, setIsBlockUsed) => {\r\n//   setSelectedBlock(null);\r\n//   setSelectedCategory(null);\r\n//   setIsBlockUsed(false);\r\n// };\r\n\r\n// // Обработка завершения игры\r\n// export const handleNewGame = (currentQuizId, setQuizStates, setConfettiRunning, setShowEndMessage) => {\r\n//   console.log('Starting new game for quiz:', currentQuizId);\r\n\r\n//   setQuizStates((prevStates) => {\r\n//     const currentGameState = prevStates[currentQuizId] || {};\r\n//     const completedGames = (currentGameState.completedGames || 0) + 1;\r\n\r\n//     // Сохраняем количество завершенных игр в localStorage\r\n//     const updatedState = {\r\n//       ...prevStates,\r\n//       [currentQuizId]: {\r\n//         ...currentGameState,\r\n//         usedBlocks: {}, // Обнуляем использованные блоки\r\n//         completedGames, // Обновляем количество завершенных игр\r\n//       },\r\n//     };\r\n//     localStorage.setItem('quizStates', JSON.stringify(updatedState));\r\n//     return updatedState;\r\n//   });\r\n\r\n//   setConfettiRunning(false);\r\n//   setShowEndMessage(false);\r\n// };\r\n\r\n// // Обработка возврата в главное меню\r\n// export const handleMainMenu = (\r\n//   currentQuizId, setQuizStates, setShowQuizPage, setConfettiRunning, clearState = false\r\n// ) => {\r\n//   console.log('Returning to main menu, clearing state:', clearState);\r\n\r\n//   if (clearState) {\r\n//     setQuizStates((prevStates) => {\r\n//       const currentGameState = prevStates[currentQuizId] || {};\r\n\r\n//       // Очищаем только использованные блоки, оставляем завершенные игры\r\n//       const updatedState = {\r\n//         ...prevStates,\r\n//         [currentQuizId]: {\r\n//           ...currentGameState,\r\n//           usedBlocks: {}, // Очищаем только использованные блоки\r\n//           completedGames: currentGameState.completedGames, // Сохраняем завершенные игры\r\n//         },\r\n//       };\r\n\r\n//       // Обновляем данные в localStorage\r\n//       localStorage.setItem('quizStates', JSON.stringify(updatedState));\r\n//       return updatedState;\r\n//     });\r\n//   }\r\n\r\n//   setShowQuizPage(false);\r\n//   setConfettiRunning(false);\r\n// };\r\n\r\n// // Обработка выбора категории и запуска конфетти\r\n// export const handleSelectCategory = (\r\n//   categoryId, blockId, currentQuizId, markBlockAsUsed, totalBlocks, usedBlocksCount, setConfettiRunning, setShowEndMessage, handleCloseModal\r\n// ) => {\r\n//   markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n//   if (usedBlocksCount + 1 === totalBlocks) {\r\n//     setConfettiRunning(true);\r\n//     setShowEndMessage(true);\r\n//   }\r\n\r\n//   handleCloseModal();\r\n// };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}