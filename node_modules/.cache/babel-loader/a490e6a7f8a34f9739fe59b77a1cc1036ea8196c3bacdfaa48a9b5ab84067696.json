{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-app-react\\\\src\\\\components\\\\QuizPage\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from 'react';\nimport ContentContainer from '../ContentContainer/ContentContainer';\nimport EndMessage from '../EndMessage/EndMessage';\nimport MenuModal from '../MenuModal/MenuModal';\nimport Modal from '../Modal/Modal';\nimport Settings from '../Settings/Settings';\nimport ConfettiAnimation from '../ConfettiAnimation/ConfettiAnimation';\nimport styles from './QuizPage.module.css';\nimport { useQuizContext } from '../../context/QuizContext';\nimport PCImage from '../../images/PC_horizontal_1line_black.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const {\n    quizStates,\n    setShowQuizPage,\n    currentQuizId,\n    selectedMode,\n    data,\n    markBlockAsUsed\n  } = useQuizContext();\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [confettiRunning, setConfettiRunning] = useState(false);\n  const [showEndMessage, setShowEndMessage] = useState(false);\n  const totalBlocks = useMemo(() => {\n    return (data === null || data === void 0 ? void 0 : data.reduce((acc, category) => acc + category.blocks.length, 0)) || 0;\n  }, [data]);\n  const usedBlocksCount = useMemo(() => {\n    return Object.values(currentQuizState.usedBlocks || {}).reduce((acc, categoryBlocks) => acc + categoryBlocks.length, 0);\n  }, [currentQuizState]);\n  const handleBlockSelect = (block, category) => {\n    setSelectedBlock(block);\n    setSelectedCategory(category);\n  };\n  const handleCloseModal = () => {\n    setSelectedBlock(null);\n    setSelectedCategory(null);\n  };\n  const handleSelectCategory = (categoryId, blockId) => {\n    markBlockAsUsed(currentQuizId, categoryId, blockId);\n    if (usedBlocksCount === totalBlocks - 1) {\n      setConfettiRunning(true);\n      setShowEndMessage(true);\n    }\n    handleCloseModal();\n  };\n  const handleNewGame = () => {\n    setShowEndMessage(false);\n    setConfettiRunning(false);\n    // Логика для начала новой игры\n  };\n  const handleMainMenu = () => {\n    setShowEndMessage(false);\n    setConfettiRunning(false);\n    setShowQuizPage(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.quiz_page,\n    children: [/*#__PURE__*/_jsxDEV(ConfettiAnimation, {\n      isRunning: confettiRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: PCImage,\n        alt: \"PC horizontal line\",\n        className: styles.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n        data: data,\n        onBlockSelect: handleBlockSelect,\n        usedBlocks: currentQuizState.usedBlocks || {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), selectedBlock && /*#__PURE__*/_jsxDEV(Modal, {\n        block: selectedBlock,\n        categoryName: (selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.name) || 'Без категории',\n        onClose: handleCloseModal,\n        selectedMode: selectedMode,\n        onSelectCategory: handleSelectCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), showEndMessage && /*#__PURE__*/_jsxDEV(EndMessage, {\n      onNewGame: handleNewGame,\n      onMainMenu: handleMainMenu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuModal, {\n      showSettings: () => setIsSettingsVisible(true),\n      showMainMenu: handleMainMenu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), isSettingsVisible && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: () => setIsSettingsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"7Ultezs46jpt34Ae4YcrwDybuvM=\", false, function () {\n  return [useQuizContext];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","ContentContainer","EndMessage","MenuModal","Modal","Settings","ConfettiAnimation","styles","useQuizContext","PCImage","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","_s","quizStates","setShowQuizPage","currentQuizId","selectedMode","data","markBlockAsUsed","currentQuizState","isSettingsVisible","setIsSettingsVisible","selectedBlock","setSelectedBlock","selectedCategory","setSelectedCategory","confettiRunning","setConfettiRunning","showEndMessage","setShowEndMessage","totalBlocks","reduce","acc","category","blocks","length","usedBlocksCount","Object","values","usedBlocks","categoryBlocks","handleBlockSelect","block","handleCloseModal","handleSelectCategory","categoryId","blockId","handleNewGame","handleMainMenu","className","quiz_page","children","isRunning","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","image","onBlockSelect","categoryName","name","onClose","onSelectCategory","onNewGame","onMainMenu","showSettings","showMainMenu","_c","$RefreshReg$"],"sources":["E:/quiz-app-react/src/components/QuizPage/QuizPage.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\nimport EndMessage from '../EndMessage/EndMessage';\r\nimport MenuModal from '../MenuModal/MenuModal';\r\nimport Modal from '../Modal/Modal';\r\nimport Settings from '../Settings/Settings';\r\nimport ConfettiAnimation from '../ConfettiAnimation/ConfettiAnimation';\r\nimport styles from './QuizPage.module.css';\r\nimport { useQuizContext } from '../../context/QuizContext';\r\nimport PCImage from '../../images/PC_horizontal_1line_black.svg';\r\n\r\nfunction QuizPage() {\r\n  const { quizStates, setShowQuizPage, currentQuizId, selectedMode, data, markBlockAsUsed } = useQuizContext();\r\n\r\n  const currentQuizState = useMemo(() => quizStates[currentQuizId] || {}, [quizStates, currentQuizId]);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [confettiRunning, setConfettiRunning] = useState(false);\r\n  const [showEndMessage, setShowEndMessage] = useState(false);\r\n\r\n  const totalBlocks = useMemo(() => {\r\n    return data?.reduce((acc, category) => acc + category.blocks.length, 0) || 0;\r\n  }, [data]);\r\n\r\n  const usedBlocksCount = useMemo(() => {\r\n    return Object.values(currentQuizState.usedBlocks || {}).reduce(\r\n      (acc, categoryBlocks) => acc + categoryBlocks.length,\r\n      0\r\n    );\r\n  }, [currentQuizState]);\r\n\r\n  const handleBlockSelect = (block, category) => {\r\n    setSelectedBlock(block);\r\n    setSelectedCategory(category);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setSelectedBlock(null);\r\n    setSelectedCategory(null);\r\n  };\r\n\r\n  const handleSelectCategory = (categoryId, blockId) => {\r\n    markBlockAsUsed(currentQuizId, categoryId, blockId);\r\n\r\n    if (usedBlocksCount === totalBlocks - 1) {\r\n      setConfettiRunning(true);\r\n      setShowEndMessage(true);\r\n    }\r\n\r\n    handleCloseModal();\r\n  };\r\n\r\n  const handleNewGame = () => {\r\n    setShowEndMessage(false);\r\n    setConfettiRunning(false);\r\n    // Логика для начала новой игры\r\n  };\r\n\r\n  const handleMainMenu = () => {\r\n    setShowEndMessage(false);\r\n    setConfettiRunning(false);\r\n    setShowQuizPage(false);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.quiz_page}>\r\n      <ConfettiAnimation isRunning={confettiRunning} />\r\n      {data ? (\r\n        <>\r\n          <img src={PCImage} alt=\"PC horizontal line\" className={styles.image} />\r\n          <ContentContainer\r\n            data={data}\r\n            onBlockSelect={handleBlockSelect}\r\n            usedBlocks={currentQuizState.usedBlocks || {}}\r\n          />\r\n          {selectedBlock && (\r\n            <Modal\r\n              block={selectedBlock}\r\n              categoryName={selectedCategory?.name || 'Без категории'}\r\n              onClose={handleCloseModal}\r\n              selectedMode={selectedMode}\r\n              onSelectCategory={handleSelectCategory}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No data available.</div>\r\n      )}\r\n      {showEndMessage && (\r\n        <EndMessage onNewGame={handleNewGame} onMainMenu={handleMainMenu} />\r\n      )}\r\n      <MenuModal\r\n        showSettings={() => setIsSettingsVisible(true)}\r\n        showMainMenu={handleMainMenu}\r\n      />\r\n      {isSettingsVisible && <Settings onClose={() => setIsSettingsVisible(false)} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}